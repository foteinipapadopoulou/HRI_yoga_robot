<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Record Initial Position" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="289" y="323">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion_proxy = None
        self.memory_proxy = None

    def onLoad(self):
        # Initialize proxies
        self.motion_proxy = self.session().service("ALMotion")
        self.memory_proxy = self.session().service("ALMemory")
        print "Proxies initialized."

    def onInput_onStart(self):
        # Record the initial position
        start_position = self.motion_proxy.getRobotPosition(False)
        print "Initial position recorded:", start_position

        # Store in ALMemory
        self.memory_proxy.insertData("InitialPosition", start_position)
        print "Initial position saved to ALMemory."

        self.onStopped()

    def onInput_onStop(self):
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Random Moves and Postures" id="2" localization="8" tooltip="" x="494" y="325">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion_proxy = None
        self.posture_proxy = None

    def onLoad(self):
        # Initialize proxies
        self.motion_proxy = self.session().service("ALMotion")
        self.posture_proxy = self.session().service("ALRobotPosture")
        print "Motion and Posture proxies initialized."

    def onUnload(self):
        self.motion_proxy.stopMove()
        print "Clean-up complete."

    def onInput_onStart(self):
        # Perform example posture and movement
        print "Performing posture: LyingBack"
        self.posture_proxy.goToPosture("LyingBack", 1.0)
        self.posture_proxy.goToPosture("StandInit", 1.0)
        print "Moving forward and rotating."
#        self.motion_proxy.moveTo(0.5, 0, 0)   # Move forward
        self.motion_proxy.moveTo(0, 0, 0.9)  # Rotate 90 degrees
        print "Example movement complete."

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Move Back to Initial Position" id="3" localization="8" tooltip="" x="823" y="353">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[from naoqi import ALProxy
import math

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion_proxy = None
        self.memory_proxy = None

    def onLoad(self):
        # Initialize proxies
        self.motion_proxy =  self.session().service("ALMotion")
        self.memory_proxy =self.session().service("ALMemory")
        print "Proxies initialized."

    def onInput_onStart(self):
        try:
            # Retrieve the stored position from ALMemory
            start_position = self.memory_proxy.getData("InitialPosition")
            print "Loaded initial position:", start_position
        except Exception as e:
            print "Error loading initial position from ALMemory:", e
            self.onStopped()
            return

        # Get current position
        current_position = self.motion_proxy.getRobotPosition(False)
        print "Current position:", current_position

        # Step 1: Calculate displacement (delta_x, delta_y)
        delta_x = start_position[0] - current_position[0]
        delta_y = start_position[1] - current_position[1]

        # Step 2: Calculate the straight-line distance
        distance_to_start = math.sqrt(delta_x**2 + delta_y**2)
        print "Moving straight to the start position: distance = %s meters" % distance_to_start

        # Move directly to the target position without rotating to face it
        self.motion_proxy.moveTo(distance_to_start, 0, 0)

        # Step 3: Correct orientation (theta)
        current_position = self.motion_proxy.getRobotPosition(False)
        delta_theta = start_position[2] - current_position[2]
        print "Correcting orientation to match the starting angle: delta_theta = %s radians" % delta_theta

        # Rotate in place to match the starting orientation
        self.motion_proxy.moveTo(0, 0, delta_theta)

        print "Returned to starting position and orientation."
        self.onStopped()

    def onInput_onStop(self):
        self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="3" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
