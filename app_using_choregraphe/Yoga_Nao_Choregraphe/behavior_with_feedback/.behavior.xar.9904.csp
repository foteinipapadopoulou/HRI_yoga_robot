<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="100">
            <Box name="Intro" id="16" localization="8" tooltip="Enter description here" x="143" y="92">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Go to position Stand_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="GotopositionStand_success" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Go to position Stand" id="15" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="1143" y="42">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Go to position Stand" id="3" localization="8" tooltip="Robot will go to the position Stand&lt;br/&gt;Position description : Standing position with low power consumption. " x="65" y="17">
                        <bitmap>media/images/positions/Stand.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[#~ This script was generated automatically by drang&drop from Position Library
class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.postureService = None
        try:
            self.postureService = self.session().service("ALRobotPosture")
        except:
            self.logger.error("Module 'ALRobotPosture' not found.")

    def onUnload(self):
        if(self.postureService != None):
            self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.postureService != None):
            result = self.postureService.goToPosture("Stand", 0.8)
            if(result):
                self.success()
            else:
                self.logger.error("Posture Stand is not a part of the standard posture library or robot cannot reach the posture")
                self.failure()
        else:
            self.failure()

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method,               as the code written in onUnload is used to stop the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                        <Resource name="All motors" type="Lock" timeout="0" />
                        <Resource name="Stiffness" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say Text" id="5" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="956" y="59">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="random" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit" id="6" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="199" y="46">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Hello and welcome to today’s yoga exercise!")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Hello and welcome to today’s yoga exercise!]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say Text" id="13" localization="8" tooltip="Say the text received on its input." x="496" y="53">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit (1)" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="656" y="54">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("I am NAO, a yoga teacher and I am glad that you are all here.\r\n\\pau=300\\\r\nToday\'s yoga session is to do basic yoga exercises with you to improve your posture, relaxation and concentration and low your stress.\r\n\\pau=300\\\r\nLet\'s start with a simple breathing exercise. Stand comfortably and close your eyes.\r\n\\pau=1000\\\r\nBreathe in and out deeply and feel your chest rise and fall.\r\n\\pau=1000\\\r\nFocus on your breathing and try to let go of all other thoughts. \\pau=1000\\ Now take three more relaxed breaths.\r\n\\pau=5000\\\r\nNow that you have your breathing under control, let\'s move on to the yoga exercises. Please make sure you have enough space to move your arms and legs. I will always explain the exercise first, then you hold it for five breaths.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[I am NAO, a yoga teacher and I am glad that you are all here.
\pau=300\
Today's yoga session is to do basic yoga exercises with you to improve your posture, relaxation and concentration and low your stress.
\pau=300\
Let's start with a simple breathing exercise. Stand comfortably and close your eyes.
\pau=1000\
Breathe in and out deeply and feel your chest rise and fall.
\pau=1000\
Focus on your breathing and try to let go of all other thoughts. \pau=1000\ Now take three more relaxed breaths.
\pau=5000\
Now that you have your breathing under control, let's move on to the yoga exercises. Please make sure you have enough space to move your arms and legs. I will always explain the exercise first, then you hold it for five breaths.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="wave" id="1" localization="8" tooltip="nao waves" x="227" y="167">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="90">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe29" index="29">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <BehaviorLayer name="behavior_layer2">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="10" value="-4.74855" />
                              <Key frame="20" value="-4.74855" />
                              <Key frame="30" value="-4.74855" />
                              <Key frame="40" value="-4.74855" />
                              <Key frame="45" value="-4.74855" />
                              <Key frame="50" value="-4.74855" />
                              <Key frame="55" value="-4.74855" />
                              <Key frame="90" value="-4.74855" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="10" value="-1.23289" />
                              <Key frame="20" value="-1.23289" />
                              <Key frame="30" value="-1.23289" />
                              <Key frame="40" value="-1.23289" />
                              <Key frame="45" value="-1.23289" />
                              <Key frame="50" value="-1.23289" />
                              <Key frame="55" value="-1.23289" />
                              <Key frame="90" value="-1.23289" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="10" value="5.00743" />
                              <Key frame="20" value="5.00743" />
                              <Key frame="30" value="5.00743" />
                              <Key frame="40" value="5.00743" />
                              <Key frame="45" value="5.00743" />
                              <Key frame="50" value="5.00743" />
                              <Key frame="55" value="5.00743" />
                              <Key frame="90" value="5.00743" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="10" value="-4.39218" />
                              <Key frame="20" value="-4.39218" />
                              <Key frame="30" value="-4.39218" />
                              <Key frame="40" value="-4.39218" />
                              <Key frame="45" value="-4.39218" />
                              <Key frame="50" value="-4.39218" />
                              <Key frame="55" value="-4.39218" />
                              <Key frame="90" value="-4.39218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="-34.5391" />
                              <Key frame="20" value="-43.4161" />
                              <Key frame="30" value="-31.5507" />
                              <Key frame="40" value="-87.0983" />
                              <Key frame="45" value="-68.1137" />
                              <Key frame="50" value="-87.0983" />
                              <Key frame="55" value="-68.1137" />
                              <Key frame="90" value="-18.8943" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="10" value="-104.418" />
                              <Key frame="20" value="-105.736" />
                              <Key frame="30" value="-120.326" />
                              <Key frame="40" value="-105.56" />
                              <Key frame="45" value="-120.59" />
                              <Key frame="50" value="-105.56" />
                              <Key frame="55" value="-120.59" />
                              <Key frame="90" value="-118.48" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="10" value="0.2636" />
                              <Key frame="20" value="1" />
                              <Key frame="30" value="1" />
                              <Key frame="40" value="1" />
                              <Key frame="45" value="1" />
                              <Key frame="50" value="1" />
                              <Key frame="55" value="1" />
                              <Key frame="90" value="0.2636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="10" value="7.73688" />
                              <Key frame="20" value="7.73688" />
                              <Key frame="30" value="7.73688" />
                              <Key frame="40" value="7.73688" />
                              <Key frame="45" value="7.73688" />
                              <Key frame="50" value="7.73688" />
                              <Key frame="55" value="7.73688" />
                              <Key frame="90" value="7.73688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="10" value="2.1997" />
                              <Key frame="20" value="2.1997" />
                              <Key frame="30" value="2.1997" />
                              <Key frame="40" value="2.1997" />
                              <Key frame="45" value="2.1997" />
                              <Key frame="50" value="2.1997" />
                              <Key frame="55" value="2.1997" />
                              <Key frame="90" value="2.1997" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="10" value="-12.4782" />
                              <Key frame="20" value="-12.4782" />
                              <Key frame="30" value="-12.4782" />
                              <Key frame="40" value="-12.4782" />
                              <Key frame="45" value="-12.4782" />
                              <Key frame="50" value="-12.4782" />
                              <Key frame="55" value="-12.4782" />
                              <Key frame="90" value="-12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="10" value="-4.66066" />
                              <Key frame="20" value="-4.66066" />
                              <Key frame="30" value="-4.66066" />
                              <Key frame="40" value="-4.66066" />
                              <Key frame="45" value="-4.66066" />
                              <Key frame="50" value="-4.66066" />
                              <Key frame="55" value="-4.66066" />
                              <Key frame="90" value="-4.66066" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="10" value="83.9342" />
                              <Key frame="20" value="56.7756" />
                              <Key frame="30" value="42.9767" />
                              <Key frame="40" value="33.8359" />
                              <Key frame="45" value="42.713" />
                              <Key frame="50" value="33.8359" />
                              <Key frame="55" value="42.713" />
                              <Key frame="90" value="75.0571" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-6.59429" />
                              <Key frame="20" value="14.6755" />
                              <Key frame="30" value="40.0762" />
                              <Key frame="40" value="31.287" />
                              <Key frame="45" value="34.7148" />
                              <Key frame="50" value="31.287" />
                              <Key frame="55" value="34.7148" />
                              <Key frame="90" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="10" value="59.1487" />
                              <Key frame="20" value="45.4376" />
                              <Key frame="30" value="17.4002" />
                              <Key frame="40" value="31.7265" />
                              <Key frame="45" value="22.2342" />
                              <Key frame="50" value="31.7265" />
                              <Key frame="55" value="22.2342" />
                              <Key frame="90" value="60.0277" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="10" value="4.83644" />
                              <Key frame="20" value="4.83644" />
                              <Key frame="30" value="4.83644" />
                              <Key frame="40" value="4.83644" />
                              <Key frame="45" value="4.83644" />
                              <Key frame="50" value="4.83644" />
                              <Key frame="55" value="4.83644" />
                              <Key frame="90" value="4.83644" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="10" value="8.79157" />
                              <Key frame="20" value="8.79157" />
                              <Key frame="30" value="8.79157" />
                              <Key frame="40" value="8.79157" />
                              <Key frame="45" value="8.79157" />
                              <Key frame="50" value="8.79157" />
                              <Key frame="55" value="8.79157" />
                              <Key frame="90" value="8.79157" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="19.3386" />
                              <Key frame="20" value="18.8112" />
                              <Key frame="30" value="18.8112" />
                              <Key frame="40" value="18.8112" />
                              <Key frame="45" value="18.196" />
                              <Key frame="50" value="18.8112" />
                              <Key frame="55" value="18.196" />
                              <Key frame="90" value="19.3386" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="10" value="68.2895" />
                              <Key frame="20" value="68.2895" />
                              <Key frame="30" value="68.2895" />
                              <Key frame="40" value="68.2895" />
                              <Key frame="45" value="68.2895" />
                              <Key frame="50" value="68.2895" />
                              <Key frame="55" value="68.2895" />
                              <Key frame="90" value="68.2895" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="10" value="0.2728" />
                              <Key frame="20" value="0.2728" />
                              <Key frame="30" value="0.2728" />
                              <Key frame="40" value="0.2728" />
                              <Key frame="45" value="0.2728" />
                              <Key frame="50" value="0.2728" />
                              <Key frame="55" value="0.2728" />
                              <Key frame="90" value="0.2728" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="10" value="6.85315" />
                              <Key frame="20" value="6.85315" />
                              <Key frame="30" value="6.85315" />
                              <Key frame="40" value="6.85315" />
                              <Key frame="45" value="6.85315" />
                              <Key frame="50" value="6.85315" />
                              <Key frame="55" value="6.85315" />
                              <Key frame="90" value="6.85315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="10" value="-9.13833" />
                              <Key frame="20" value="-9.13833" />
                              <Key frame="30" value="-9.13833" />
                              <Key frame="40" value="-9.13833" />
                              <Key frame="45" value="-9.13833" />
                              <Key frame="50" value="-9.13833" />
                              <Key frame="55" value="-9.13833" />
                              <Key frame="90" value="-9.13833" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="10" value="-12.4782" />
                              <Key frame="20" value="-12.4782" />
                              <Key frame="30" value="-12.4782" />
                              <Key frame="40" value="-12.4782" />
                              <Key frame="45" value="-12.4782" />
                              <Key frame="50" value="-12.4782" />
                              <Key frame="55" value="-12.4782" />
                              <Key frame="90" value="-12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="10" value="-4.65585" />
                              <Key frame="20" value="-4.65585" />
                              <Key frame="30" value="-4.65585" />
                              <Key frame="40" value="-4.65585" />
                              <Key frame="45" value="-4.65585" />
                              <Key frame="50" value="-4.65585" />
                              <Key frame="55" value="-4.65585" />
                              <Key frame="90" value="-4.65585" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="10" value="82.5327" />
                              <Key frame="20" value="82.5327" />
                              <Key frame="30" value="82.5327" />
                              <Key frame="40" value="82.5327" />
                              <Key frame="45" value="82.5327" />
                              <Key frame="50" value="82.5327" />
                              <Key frame="55" value="82.5327" />
                              <Key frame="90" value="82.5327" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-1.49656" />
                              <Key frame="20" value="-1.49656" />
                              <Key frame="30" value="-1.49656" />
                              <Key frame="40" value="-1.49656" />
                              <Key frame="45" value="-0.793436" />
                              <Key frame="50" value="-1.49656" />
                              <Key frame="55" value="-0.793436" />
                              <Key frame="90" value="-1.49656" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="10" value="-4.92435" />
                              <Key frame="20" value="-4.92435" />
                              <Key frame="30" value="-4.92435" />
                              <Key frame="40" value="-4.92435" />
                              <Key frame="45" value="-4.92435" />
                              <Key frame="50" value="-4.92435" />
                              <Key frame="55" value="-4.92435" />
                              <Key frame="90" value="-4.92435" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="15" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="13" indexofinput="2" outputowner="6" indexofoutput="3" />
                      <Link inputowner="14" indexofinput="2" outputowner="13" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="14" indexofoutput="3" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Warrior I" id="5" localization="8" tooltip="Enter description here" x="398" y="92">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Warrior I Rechts_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Say2_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="warrior" default_value="warrior" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Warrior I" id="4" localization="8" tooltip="Timeline for the Yoga Pose Warrior I." x="480" y="67">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="1016">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="325" y="62">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="68" y="60">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.\r\n\r\nIt creates awareness of muscles and balance.\r\n\r\nStand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \\pau=300\\ and extend your left leg, foot should be facing outwards. \\pau=300\\\r\nBend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.\r\n\r\nHold this position for five breaths.\r\n\r\nI\'ll count for you again.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.

It creates awareness of muscles and balance.

Stand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \pau=300\ and extend your left leg, foot should be facing outwards. \pau=300\
Bend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.

Hold this position for five breaths.

I'll count for you again.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="497" y="72">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="24" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.44688" />
                              <Key frame="147" value="4.83163" />
                              <Key frame="167" value="-26.8094" />
                              <Key frame="188" value="-67.8548" />
                              <Key frame="248" value="-67.8548" />
                              <Key frame="284" value="-68.5579" />
                              <Key frame="290" value="-68.5579" />
                              <Key frame="295" value="-68.5579" />
                              <Key frame="550" value="-68.5579" />
                              <Key frame="731" value="-68.5579" />
                              <Key frame="967" value="-68.5579" />
                              <Key frame="983" value="-68.5579" />
                              <Key frame="1000" value="-26.5457" />
                              <Key frame="1016" value="5.35899" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.67737" />
                              <Key frame="147" value="-6.4137" />
                              <Key frame="167" value="-5.97423" />
                              <Key frame="188" value="-2.54646" />
                              <Key frame="248" value="-2.54646" />
                              <Key frame="284" value="-2.54646" />
                              <Key frame="290" value="-2.54646" />
                              <Key frame="295" value="-2.54646" />
                              <Key frame="550" value="-2.54646" />
                              <Key frame="731" value="-2.54646" />
                              <Key frame="967" value="-2.54646" />
                              <Key frame="983" value="-2.54646" />
                              <Key frame="1000" value="-5.88634" />
                              <Key frame="1016" value="-6.15001" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-23.2889" />
                              <Key frame="147" value="-22.8494" />
                              <Key frame="167" value="-10.8962" />
                              <Key frame="188" value="-13.7966" />
                              <Key frame="248" value="-13.7966" />
                              <Key frame="284" value="-1.0523" />
                              <Key frame="290" value="-1.0523" />
                              <Key frame="295" value="-1.0523" />
                              <Key frame="550" value="-1.0523" />
                              <Key frame="731" value="-1.0523" />
                              <Key frame="967" value="-1.0523" />
                              <Key frame="983" value="-1.0523" />
                              <Key frame="1000" value="-20.9158" />
                              <Key frame="1016" value="-23.1131" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.1517" />
                              <Key frame="147" value="-67.3275" />
                              <Key frame="167" value="-67.1517" />
                              <Key frame="188" value="-68.8216" />
                              <Key frame="248" value="-68.8216" />
                              <Key frame="284" value="-53.2648" />
                              <Key frame="290" value="-53.2648" />
                              <Key frame="295" value="-53.2648" />
                              <Key frame="550" value="-53.2648" />
                              <Key frame="731" value="-53.2648" />
                              <Key frame="967" value="-53.2648" />
                              <Key frame="983" value="-53.2648" />
                              <Key frame="1000" value="-68.5579" />
                              <Key frame="1016" value="-67.4154" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="147" value="0.3048" />
                              <Key frame="167" value="0.3004" />
                              <Key frame="188" value="0.296" />
                              <Key frame="248" value="0.296" />
                              <Key frame="284" value="0.7696" />
                              <Key frame="290" value="0.7696" />
                              <Key frame="295" value="0.7696" />
                              <Key frame="550" value="0.7696" />
                              <Key frame="731" value="0.7696" />
                              <Key frame="967" value="0.7696" />
                              <Key frame="983" value="0.7696" />
                              <Key frame="1000" value="0.2892" />
                              <Key frame="1016" value="0.2976" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.29742" />
                              <Key frame="147" value="7.56109" />
                              <Key frame="167" value="-36.9121" />
                              <Key frame="188" value="3.78175" />
                              <Key frame="248" value="3.78175" />
                              <Key frame="284" value="3.78175" />
                              <Key frame="290" value="3.78175" />
                              <Key frame="295" value="3.78175" />
                              <Key frame="550" value="3.78175" />
                              <Key frame="731" value="3.78175" />
                              <Key frame="967" value="3.78175" />
                              <Key frame="983" value="3.78175" />
                              <Key frame="1000" value="-37" />
                              <Key frame="1016" value="7.4732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.41851" />
                              <Key frame="147" value="6.85796" />
                              <Key frame="167" value="4.66066" />
                              <Key frame="188" value="-1.93121" />
                              <Key frame="248" value="-1.93121" />
                              <Key frame="284" value="-1.93121" />
                              <Key frame="290" value="-1.93121" />
                              <Key frame="295" value="-1.93121" />
                              <Key frame="550" value="-1.93121" />
                              <Key frame="731" value="-1.93121" />
                              <Key frame="967" value="-1.93121" />
                              <Key frame="983" value="-1.93121" />
                              <Key frame="1000" value="4.48488" />
                              <Key frame="1016" value="6.41851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="147" value="-9.92936" />
                              <Key frame="167" value="-10.7204" />
                              <Key frame="188" value="-26.453" />
                              <Key frame="248" value="-26.453" />
                              <Key frame="284" value="-26.453" />
                              <Key frame="290" value="-26.453" />
                              <Key frame="295" value="-26.453" />
                              <Key frame="550" value="-26.453" />
                              <Key frame="731" value="-26.453" />
                              <Key frame="967" value="-26.453" />
                              <Key frame="983" value="-26.453" />
                              <Key frame="1000" value="-10.8962" />
                              <Key frame="1016" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.45169" />
                              <Key frame="147" value="-5.45169" />
                              <Key frame="167" value="68.2016" />
                              <Key frame="188" value="81.649" />
                              <Key frame="248" value="81.649" />
                              <Key frame="284" value="81.649" />
                              <Key frame="290" value="81.649" />
                              <Key frame="295" value="81.649" />
                              <Key frame="550" value="81.649" />
                              <Key frame="731" value="81.649" />
                              <Key frame="967" value="81.649" />
                              <Key frame="983" value="81.649" />
                              <Key frame="1000" value="68.1137" />
                              <Key frame="1016" value="-5.62747" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.5611" />
                              <Key frame="147" value="81.4732" />
                              <Key frame="167" value="71.5415" />
                              <Key frame="188" value="72.4204" />
                              <Key frame="248" value="72.4204" />
                              <Key frame="284" value="-84.73" />
                              <Key frame="290" value="-84.73" />
                              <Key frame="295" value="-84.73" />
                              <Key frame="550" value="-84.73" />
                              <Key frame="731" value="-84.73" />
                              <Key frame="967" value="-84.73" />
                              <Key frame="983" value="-6.59429" />
                              <Key frame="1000" value="68.2895" />
                              <Key frame="1016" value="81.649" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="11.4235" />
                              <Key frame="147" value="12.3903" />
                              <Key frame="167" value="22.4979" />
                              <Key frame="188" value="18.9822" />
                              <Key frame="248" value="18.9822" />
                              <Key frame="284" value="21.9705" />
                              <Key frame="290" value="21.9705" />
                              <Key frame="295" value="21.9705" />
                              <Key frame="550" value="21.9705" />
                              <Key frame="731" value="21.9705" />
                              <Key frame="967" value="21.9705" />
                              <Key frame="983" value="18.0154" />
                              <Key frame="1000" value="9.75358" />
                              <Key frame="1016" value="11.5993" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="6.94104" />
                              <Key frame="147" value="4.83163" />
                              <Key frame="167" value="-50.1886" />
                              <Key frame="188" value="-11.8678" />
                              <Key frame="248" value="-11.8678" />
                              <Key frame="284" value="-40.8721" />
                              <Key frame="290" value="-40.8721" />
                              <Key frame="295" value="-40.8721" />
                              <Key frame="550" value="-40.8721" />
                              <Key frame="731" value="-40.8721" />
                              <Key frame="967" value="-40.8721" />
                              <Key frame="983" value="-44.2119" />
                              <Key frame="1000" value="-6.94585" />
                              <Key frame="1016" value="4.48007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.45169" />
                              <Key frame="147" value="4.92435" />
                              <Key frame="167" value="-32.2539" />
                              <Key frame="188" value="18.5476" />
                              <Key frame="248" value="18.5476" />
                              <Key frame="284" value="18.5476" />
                              <Key frame="290" value="18.5476" />
                              <Key frame="295" value="18.5476" />
                              <Key frame="550" value="18.5476" />
                              <Key frame="731" value="18.5476" />
                              <Key frame="967" value="18.5476" />
                              <Key frame="983" value="18.5476" />
                              <Key frame="1000" value="-31.9902" />
                              <Key frame="1016" value="5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="147" value="6.3306" />
                              <Key frame="167" value="6.5064" />
                              <Key frame="188" value="-2.0191" />
                              <Key frame="248" value="-2.0191" />
                              <Key frame="284" value="-2.0191" />
                              <Key frame="290" value="-2.0191" />
                              <Key frame="295" value="-2.0191" />
                              <Key frame="550" value="-2.0191" />
                              <Key frame="731" value="-2.0191" />
                              <Key frame="967" value="-2.0191" />
                              <Key frame="983" value="-2.0191" />
                              <Key frame="1000" value="6.77007" />
                              <Key frame="1016" value="6.94585" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.6121" />
                              <Key frame="147" value="22.8542" />
                              <Key frame="167" value="21.0085" />
                              <Key frame="188" value="15.4713" />
                              <Key frame="248" value="15.4713" />
                              <Key frame="284" value="0.969218" />
                              <Key frame="290" value="0.969218" />
                              <Key frame="295" value="0.969218" />
                              <Key frame="550" value="0.969218" />
                              <Key frame="731" value="0.969218" />
                              <Key frame="967" value="0.969218" />
                              <Key frame="983" value="0.969218" />
                              <Key frame="1000" value="22.5906" />
                              <Key frame="1016" value="22.6785" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.0258" />
                              <Key frame="147" value="69.3442" />
                              <Key frame="167" value="69.9594" />
                              <Key frame="188" value="73.3872" />
                              <Key frame="248" value="73.3872" />
                              <Key frame="284" value="74.0024" />
                              <Key frame="290" value="74.0024" />
                              <Key frame="295" value="74.0024" />
                              <Key frame="550" value="74.0024" />
                              <Key frame="731" value="74.0024" />
                              <Key frame="967" value="74.0024" />
                              <Key frame="983" value="74.0024" />
                              <Key frame="1000" value="68.8168" />
                              <Key frame="1016" value="69.8715" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.284" />
                              <Key frame="147" value="0.2996" />
                              <Key frame="167" value="0.2936" />
                              <Key frame="188" value="0.2964" />
                              <Key frame="248" value="0.2964" />
                              <Key frame="284" value="0.762" />
                              <Key frame="290" value="0.762" />
                              <Key frame="295" value="0.762" />
                              <Key frame="550" value="0.762" />
                              <Key frame="731" value="0.762" />
                              <Key frame="967" value="0.762" />
                              <Key frame="983" value="0.762" />
                              <Key frame="1000" value="0.284" />
                              <Key frame="1016" value="0.3004" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="147" value="7.11683" />
                              <Key frame="167" value="-36.3017" />
                              <Key frame="188" value="-62.4055" />
                              <Key frame="248" value="-62.4055" />
                              <Key frame="284" value="-62.4055" />
                              <Key frame="290" value="-62.4055" />
                              <Key frame="295" value="-62.4055" />
                              <Key frame="550" value="-62.4055" />
                              <Key frame="731" value="-62.4055" />
                              <Key frame="967" value="-62.4055" />
                              <Key frame="983" value="-62.4055" />
                              <Key frame="1000" value="-35.8622" />
                              <Key frame="1016" value="7.55628" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="147" value="-6.2379" />
                              <Key frame="167" value="-7.46839" />
                              <Key frame="188" value="-2.0191" />
                              <Key frame="248" value="-2.0191" />
                              <Key frame="284" value="-2.0191" />
                              <Key frame="290" value="-2.0191" />
                              <Key frame="295" value="-2.0191" />
                              <Key frame="550" value="-2.0191" />
                              <Key frame="731" value="-2.0191" />
                              <Key frame="967" value="-2.0191" />
                              <Key frame="983" value="-2.0191" />
                              <Key frame="1000" value="-6.94104" />
                              <Key frame="1016" value="-6.50159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="147" value="-9.92936" />
                              <Key frame="167" value="-10.7204" />
                              <Key frame="188" value="-26.453" />
                              <Key frame="248" value="-26.453" />
                              <Key frame="284" value="-26.453" />
                              <Key frame="290" value="-26.453" />
                              <Key frame="295" value="-26.453" />
                              <Key frame="550" value="-26.453" />
                              <Key frame="731" value="-26.453" />
                              <Key frame="967" value="-26.453" />
                              <Key frame="983" value="-26.453" />
                              <Key frame="1000" value="-10.8962" />
                              <Key frame="1016" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.53478" />
                              <Key frame="147" value="-5.2711" />
                              <Key frame="167" value="71.1068" />
                              <Key frame="188" value="57.3957" />
                              <Key frame="248" value="57.3957" />
                              <Key frame="284" value="57.3957" />
                              <Key frame="290" value="57.3957" />
                              <Key frame="295" value="57.3957" />
                              <Key frame="550" value="57.3957" />
                              <Key frame="731" value="57.3957" />
                              <Key frame="967" value="57.3957" />
                              <Key frame="983" value="57.3957" />
                              <Key frame="1000" value="71.1068" />
                              <Key frame="1016" value="-5.97423" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.478" />
                              <Key frame="147" value="82.1812" />
                              <Key frame="167" value="69.9642" />
                              <Key frame="188" value="73.1283" />
                              <Key frame="248" value="73.1283" />
                              <Key frame="284" value="-84.7252" />
                              <Key frame="290" value="-84.7252" />
                              <Key frame="295" value="-84.7252" />
                              <Key frame="550" value="-84.7252" />
                              <Key frame="731" value="-84.7252" />
                              <Key frame="967" value="-84.7252" />
                              <Key frame="983" value="5.18802" />
                              <Key frame="1000" value="70.6674" />
                              <Key frame="1016" value="81.9175" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-11.2525" />
                              <Key frame="147" value="-12.3073" />
                              <Key frame="167" value="-22.8542" />
                              <Key frame="188" value="-20.4812" />
                              <Key frame="248" value="-20.4812" />
                              <Key frame="284" value="-14.4166" />
                              <Key frame="290" value="-14.4166" />
                              <Key frame="295" value="-14.4166" />
                              <Key frame="550" value="-14.4166" />
                              <Key frame="731" value="-14.4166" />
                              <Key frame="967" value="-14.4166" />
                              <Key frame="983" value="-17.405" />
                              <Key frame="1000" value="-8.08845" />
                              <Key frame="1016" value="-11.6041" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="4.56796" />
                              <Key frame="147" value="5.79845" />
                              <Key frame="167" value="5.97423" />
                              <Key frame="188" value="9.48991" />
                              <Key frame="248" value="9.48991" />
                              <Key frame="284" value="18.1912" />
                              <Key frame="290" value="18.1912" />
                              <Key frame="295" value="18.1912" />
                              <Key frame="550" value="18.1912" />
                              <Key frame="731" value="18.1912" />
                              <Key frame="967" value="18.1912" />
                              <Key frame="983" value="21.7068" />
                              <Key frame="1000" value="4.56796" />
                              <Key frame="1016" value="6.15001" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Say (2)" id="12" localization="8" tooltip="Say some text. The text can be localized." x="604" y="67">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Virabhadrasana one is a good pose to strengthen the legs, arms and shoulders and improve posture. We move on to Virabhadrasana two, known as warrior two." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="978" y="258">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="107" y="273">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.\r\n\r\nIt creates awareness of muscles and balance.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.

It creates awareness of muscles and balance.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say" id="1" localization="8" tooltip="Say some text. The text can be localized." x="366" y="263">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="94" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Tadasana is an effective pose to improve your posture and relaxation. We continue with Virabhadrasana one, known as warrior one." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Warrior I Start" id="3" localization="8" tooltip="Timeline for the Yoga Pose Warrior I." x="616" y="257">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="1000">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="325" y="62">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="68" y="60">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \\pau=300\\ and extend your left leg, foot should be facing outwards. \\pau=300\\\r\nBend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.\r\n\r\nHold this position for five breaths.\r\n\r\nI\'ll count for you again.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Stand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \pau=300\ and extend your left leg, foot should be facing outwards. \pau=300\
Bend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.

Hold this position for five breaths.

I'll count for you again.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="697" y="64">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="560" y="67">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="24" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.44688" />
                              <Key frame="7" value="4.83163" />
                              <Key frame="27" value="-26.8094" />
                              <Key frame="43" value="-67.8548" />
                              <Key frame="60" value="-68.5579" />
                              <Key frame="85" value="-68.5579" />
                              <Key frame="105" value="-68.5579" />
                              <Key frame="1000" value="-68.5579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.67737" />
                              <Key frame="7" value="-6.4137" />
                              <Key frame="27" value="-5.97423" />
                              <Key frame="43" value="-2.54646" />
                              <Key frame="60" value="-2.54646" />
                              <Key frame="85" value="-2.54646" />
                              <Key frame="105" value="-2.54646" />
                              <Key frame="1000" value="-2.54646" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-23.2889" />
                              <Key frame="7" value="-22.8494" />
                              <Key frame="27" value="-10.8962" />
                              <Key frame="43" value="-13.7966" />
                              <Key frame="60" value="-1.0523" />
                              <Key frame="85" value="-1.0523" />
                              <Key frame="105" value="-1.0523" />
                              <Key frame="1000" value="-1.0523" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.1517" />
                              <Key frame="7" value="-67.3275" />
                              <Key frame="27" value="-67.1517" />
                              <Key frame="43" value="-68.8216" />
                              <Key frame="60" value="-53.2648" />
                              <Key frame="85" value="-53.2648" />
                              <Key frame="105" value="-53.2648" />
                              <Key frame="1000" value="-53.2648" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="7" value="0.3048" />
                              <Key frame="27" value="0.3004" />
                              <Key frame="43" value="0.296" />
                              <Key frame="60" value="0.7696" />
                              <Key frame="85" value="0.7696" />
                              <Key frame="105" value="0.7696" />
                              <Key frame="1000" value="0.7696" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.29742" />
                              <Key frame="7" value="7.56109" />
                              <Key frame="27" value="-36.9121" />
                              <Key frame="43" value="3.78175" />
                              <Key frame="60" value="3.78175" />
                              <Key frame="85" value="3.78175" />
                              <Key frame="105" value="3.78175" />
                              <Key frame="1000" value="3.78175" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.41851" />
                              <Key frame="7" value="6.85796" />
                              <Key frame="27" value="4.66066" />
                              <Key frame="43" value="-1.93121" />
                              <Key frame="60" value="-1.93121" />
                              <Key frame="85" value="-1.93121" />
                              <Key frame="105" value="-1.93121" />
                              <Key frame="1000" value="-1.93121" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="7" value="-9.92936" />
                              <Key frame="27" value="-10.7204" />
                              <Key frame="43" value="-26.453" />
                              <Key frame="60" value="-26.453" />
                              <Key frame="85" value="-26.453" />
                              <Key frame="105" value="-26.453" />
                              <Key frame="1000" value="-26.453" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.45169" />
                              <Key frame="7" value="-5.45169" />
                              <Key frame="27" value="68.2016" />
                              <Key frame="43" value="81.649" />
                              <Key frame="60" value="81.649" />
                              <Key frame="85" value="81.649" />
                              <Key frame="105" value="81.649" />
                              <Key frame="1000" value="81.649" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.5611" />
                              <Key frame="7" value="81.4732" />
                              <Key frame="27" value="71.5415" />
                              <Key frame="43" value="72.4204" />
                              <Key frame="60" value="-84.73" />
                              <Key frame="85" value="-84.73" />
                              <Key frame="105" value="-84.73" />
                              <Key frame="1000" value="-84.73" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="11.4235" />
                              <Key frame="7" value="12.3903" />
                              <Key frame="27" value="22.4979" />
                              <Key frame="43" value="18.9822" />
                              <Key frame="60" value="21.9705" />
                              <Key frame="85" value="21.9705" />
                              <Key frame="105" value="21.9705" />
                              <Key frame="1000" value="21.9705" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="6.94104" />
                              <Key frame="7" value="4.83163" />
                              <Key frame="27" value="-50.1886" />
                              <Key frame="43" value="-11.8678" />
                              <Key frame="60" value="-40.8721" />
                              <Key frame="85" value="-40.8721" />
                              <Key frame="105" value="-40.8721" />
                              <Key frame="1000" value="-40.8721" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.45169" />
                              <Key frame="7" value="4.92435" />
                              <Key frame="27" value="-32.2539" />
                              <Key frame="43" value="18.5476" />
                              <Key frame="60" value="18.5476" />
                              <Key frame="85" value="18.5476" />
                              <Key frame="105" value="18.5476" />
                              <Key frame="1000" value="18.5476" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="7" value="6.3306" />
                              <Key frame="27" value="6.5064" />
                              <Key frame="43" value="-2.0191" />
                              <Key frame="60" value="-2.0191" />
                              <Key frame="85" value="-2.0191" />
                              <Key frame="105" value="-2.0191" />
                              <Key frame="1000" value="-2.0191" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.6121" />
                              <Key frame="7" value="22.8542" />
                              <Key frame="27" value="21.0085" />
                              <Key frame="43" value="15.4713" />
                              <Key frame="60" value="0.969218" />
                              <Key frame="85" value="0.969218" />
                              <Key frame="105" value="0.969218" />
                              <Key frame="1000" value="0.969218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.0258" />
                              <Key frame="7" value="69.3442" />
                              <Key frame="27" value="69.9594" />
                              <Key frame="43" value="73.3872" />
                              <Key frame="60" value="74.0024" />
                              <Key frame="85" value="74.0024" />
                              <Key frame="105" value="74.0024" />
                              <Key frame="1000" value="74.0024" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.284" />
                              <Key frame="7" value="0.2996" />
                              <Key frame="27" value="0.2936" />
                              <Key frame="43" value="0.2964" />
                              <Key frame="60" value="0.762" />
                              <Key frame="85" value="0.762" />
                              <Key frame="105" value="0.762" />
                              <Key frame="1000" value="0.762" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="7" value="7.11683" />
                              <Key frame="27" value="-36.3017" />
                              <Key frame="43" value="-62.4055" />
                              <Key frame="60" value="-62.4055" />
                              <Key frame="85" value="-62.4055" />
                              <Key frame="105" value="-62.4055" />
                              <Key frame="1000" value="-62.4055" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="7" value="-6.2379" />
                              <Key frame="27" value="-7.46839" />
                              <Key frame="43" value="-2.0191" />
                              <Key frame="60" value="-2.0191" />
                              <Key frame="85" value="-2.0191" />
                              <Key frame="105" value="-2.0191" />
                              <Key frame="1000" value="-2.0191" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="7" value="-9.92936" />
                              <Key frame="27" value="-10.7204" />
                              <Key frame="43" value="-26.453" />
                              <Key frame="60" value="-26.453" />
                              <Key frame="85" value="-26.453" />
                              <Key frame="105" value="-26.453" />
                              <Key frame="1000" value="-26.453" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.53478" />
                              <Key frame="7" value="-5.2711" />
                              <Key frame="27" value="71.1068" />
                              <Key frame="43" value="57.3957" />
                              <Key frame="60" value="57.3957" />
                              <Key frame="85" value="57.3957" />
                              <Key frame="105" value="57.3957" />
                              <Key frame="1000" value="57.3957" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.478" />
                              <Key frame="7" value="82.1812" />
                              <Key frame="27" value="69.9642" />
                              <Key frame="43" value="73.1283" />
                              <Key frame="60" value="-84.7252" />
                              <Key frame="85" value="-84.7252" />
                              <Key frame="105" value="-84.7252" />
                              <Key frame="1000" value="-84.7252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-11.2525" />
                              <Key frame="7" value="-12.3073" />
                              <Key frame="27" value="-22.8542" />
                              <Key frame="43" value="-20.4812" />
                              <Key frame="60" value="-14.4166" />
                              <Key frame="85" value="-14.4166" />
                              <Key frame="105" value="-14.4166" />
                              <Key frame="1000" value="-14.4166" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="4.56796" />
                              <Key frame="7" value="5.79845" />
                              <Key frame="27" value="5.97423" />
                              <Key frame="43" value="9.48991" />
                              <Key frame="60" value="18.1912" />
                              <Key frame="85" value="18.1912" />
                              <Key frame="105" value="18.1912" />
                              <Key frame="1000" value="18.1912" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Warrior I Stop" id="5" localization="8" tooltip="Timeline for the Yoga Pose Warrior I." x="745" y="258">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="60">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="356" y="77">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="6" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-68.5579" />
                              <Key frame="13" value="-68.5579" />
                              <Key frame="43" value="-26.5457" />
                              <Key frame="60" value="5.35899" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-2.54646" />
                              <Key frame="13" value="-2.54646" />
                              <Key frame="43" value="-5.88634" />
                              <Key frame="60" value="-6.15001" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-1.0523" />
                              <Key frame="13" value="-1.0523" />
                              <Key frame="43" value="-20.9158" />
                              <Key frame="60" value="-23.1131" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-53.2648" />
                              <Key frame="13" value="-53.2648" />
                              <Key frame="43" value="-68.5579" />
                              <Key frame="60" value="-67.4154" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.7696" />
                              <Key frame="13" value="0.7696" />
                              <Key frame="43" value="0.2892" />
                              <Key frame="60" value="0.2976" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="3.78175" />
                              <Key frame="13" value="3.78175" />
                              <Key frame="43" value="-37" />
                              <Key frame="60" value="7.4732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-1.93121" />
                              <Key frame="13" value="-1.93121" />
                              <Key frame="43" value="4.48488" />
                              <Key frame="60" value="6.41851" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-26.453" />
                              <Key frame="13" value="-26.453" />
                              <Key frame="43" value="-10.8962" />
                              <Key frame="60" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="81.649" />
                              <Key frame="13" value="81.649" />
                              <Key frame="43" value="68.1137" />
                              <Key frame="60" value="-5.62747" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="-84.73" />
                              <Key frame="13" value="-6.59429" />
                              <Key frame="43" value="68.2895" />
                              <Key frame="60" value="81.649" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="21.9705" />
                              <Key frame="13" value="18.0154" />
                              <Key frame="43" value="9.75358" />
                              <Key frame="60" value="11.5993" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-40.8721" />
                              <Key frame="13" value="-44.2119" />
                              <Key frame="43" value="-6.94585" />
                              <Key frame="60" value="4.48007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="18.5476" />
                              <Key frame="13" value="18.5476" />
                              <Key frame="43" value="-31.9902" />
                              <Key frame="60" value="5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-2.0191" />
                              <Key frame="13" value="-2.0191" />
                              <Key frame="43" value="6.77007" />
                              <Key frame="60" value="6.94585" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="0.969218" />
                              <Key frame="13" value="0.969218" />
                              <Key frame="43" value="22.5906" />
                              <Key frame="60" value="22.6785" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="74.0024" />
                              <Key frame="13" value="74.0024" />
                              <Key frame="43" value="68.8168" />
                              <Key frame="60" value="69.8715" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.762" />
                              <Key frame="13" value="0.762" />
                              <Key frame="43" value="0.284" />
                              <Key frame="60" value="0.3004" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-62.4055" />
                              <Key frame="13" value="-62.4055" />
                              <Key frame="43" value="-35.8622" />
                              <Key frame="60" value="7.55628" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-2.0191" />
                              <Key frame="13" value="-2.0191" />
                              <Key frame="43" value="-6.94104" />
                              <Key frame="60" value="-6.50159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-26.453" />
                              <Key frame="13" value="-26.453" />
                              <Key frame="43" value="-10.8962" />
                              <Key frame="60" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="57.3957" />
                              <Key frame="13" value="57.3957" />
                              <Key frame="43" value="71.1068" />
                              <Key frame="60" value="-5.97423" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="-84.7252" />
                              <Key frame="13" value="5.18802" />
                              <Key frame="43" value="70.6674" />
                              <Key frame="60" value="81.9175" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-14.4166" />
                              <Key frame="13" value="-17.405" />
                              <Key frame="43" value="-8.08845" />
                              <Key frame="60" value="-11.6041" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="18.1912" />
                              <Key frame="13" value="21.7068" />
                              <Key frame="43" value="4.56796" />
                              <Key frame="60" value="6.15001" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Turn Right" id="6" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="486" y="261">
                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                        <Resource name="Legs" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Turn Left" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="861" y="259">
                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                        <Resource name="Legs" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="12" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="5" />
                      <Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Tadasana (1)" id="4" localization="8" tooltip="Enter description here" x="641" y="94">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Say_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Tadasana1_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="tadasana" default_value="tadasana" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say" id="10" localization="8" tooltip="Say some text. The text can be localized." x="387" y="27">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Now we come back to the mountain position and then we change sides." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Tadasana (1)" id="11" localization="8" tooltip="NAO stands in Tadasana position (mountain stand).&#x0A;Straight back and legs, arms stretched out and palms facing forward." x="181" y="23">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="tadasana" default_value="tadasana" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="5" start_frame="1" end_frame="-1" size="211">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="415" y="200">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="138" y="160">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand up straight with your knees slightly bent. Your arms hang relaxed at your sides, your palms open in front of you. Tilt your chin slightly to your chest and breathe along the muscles in your body.\r\n\\pau=1000\\")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Stand up straight with your knees slightly bent. Your arms hang relaxed at your sides, your palms open in front of you. Tilt your chin slightly to your chest and breathe along the muscles in your body.
\pau=1000\]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="627" y="212">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="24" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="22" value="5.88634" />
                              <Key frame="30" value="5.62267" />
                              <Key frame="37" value="5.62267" />
                              <Key frame="203" value="5.62267" />
                              <Key frame="211" value="5.00743" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.4137" />
                              <Key frame="22" value="-6.4137" />
                              <Key frame="30" value="-6.94104" />
                              <Key frame="37" value="-6.94104" />
                              <Key frame="203" value="-6.94104" />
                              <Key frame="211" value="-6.4137" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-21.8826" />
                              <Key frame="22" value="-21.8826" />
                              <Key frame="30" value="-12.8298" />
                              <Key frame="37" value="-12.8298" />
                              <Key frame="203" value="-12.2146" />
                              <Key frame="211" value="-22.7616" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-69.1732" />
                              <Key frame="22" value="-69.1732" />
                              <Key frame="30" value="-70.5795" />
                              <Key frame="37" value="-70.5795" />
                              <Key frame="203" value="-70.5795" />
                              <Key frame="211" value="-69.1732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="22" value="0.2892" />
                              <Key frame="30" value="0.7588" />
                              <Key frame="37" value="0.7588" />
                              <Key frame="203" value="0.7692" />
                              <Key frame="211" value="0.3088" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.82477" />
                              <Key frame="22" value="7.82477" />
                              <Key frame="30" value="7.64898" />
                              <Key frame="37" value="7.64898" />
                              <Key frame="203" value="7.64898" />
                              <Key frame="211" value="7.82477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="22" value="6.68218" />
                              <Key frame="30" value="6.24271" />
                              <Key frame="37" value="6.24271" />
                              <Key frame="203" value="6.24271" />
                              <Key frame="211" value="6.68218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="22" value="-10.1051" />
                              <Key frame="30" value="-10.1051" />
                              <Key frame="37" value="-10.1051" />
                              <Key frame="203" value="-10.1051" />
                              <Key frame="211" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.83644" />
                              <Key frame="22" value="-4.83644" />
                              <Key frame="30" value="-5.3638" />
                              <Key frame="37" value="-5.3638" />
                              <Key frame="203" value="-5.3638" />
                              <Key frame="211" value="-4.83644" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="80.2427" />
                              <Key frame="22" value="80.2427" />
                              <Key frame="30" value="84.0221" />
                              <Key frame="37" value="84.0221" />
                              <Key frame="203" value="84.0221" />
                              <Key frame="211" value="83.1432" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="13.1813" />
                              <Key frame="22" value="13.1813" />
                              <Key frame="30" value="13.8845" />
                              <Key frame="37" value="13.0056" />
                              <Key frame="203" value="14.1482" />
                              <Key frame="211" value="12.2146" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="3.68905" />
                              <Key frame="22" value="3.68905" />
                              <Key frame="30" value="-100.111" />
                              <Key frame="37" value="-100.111" />
                              <Key frame="203" value="-101.166" />
                              <Key frame="211" value="4.48007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="6.3306" />
                              <Key frame="22" value="6.3306" />
                              <Key frame="30" value="5.62747" />
                              <Key frame="37" value="5.62747" />
                              <Key frame="203" value="5.71537" />
                              <Key frame="211" value="5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.15482" />
                              <Key frame="22" value="6.15482" />
                              <Key frame="30" value="6.3306" />
                              <Key frame="37" value="6.3306" />
                              <Key frame="203" value="6.3306" />
                              <Key frame="211" value="6.15482" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="22.3269" />
                              <Key frame="22" value="22.3269" />
                              <Key frame="30" value="8.26423" />
                              <Key frame="37" value="8.26423" />
                              <Key frame="203" value="7.64898" />
                              <Key frame="211" value="22.5906" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="71.3657" />
                              <Key frame="22" value="71.3657" />
                              <Key frame="30" value="75.9361" />
                              <Key frame="37" value="75.9361" />
                              <Key frame="203" value="76.9908" />
                              <Key frame="211" value="69.9594" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="22" value="0.294" />
                              <Key frame="30" value="0.794" />
                              <Key frame="37" value="0.794" />
                              <Key frame="203" value="0.804" />
                              <Key frame="211" value="0.3092" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="22" value="6.85315" />
                              <Key frame="30" value="6.76526" />
                              <Key frame="37" value="6.76526" />
                              <Key frame="203" value="6.76526" />
                              <Key frame="211" value="6.85315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="22" value="-6.32579" />
                              <Key frame="30" value="-6.32579" />
                              <Key frame="37" value="-6.32579" />
                              <Key frame="203" value="-6.32579" />
                              <Key frame="211" value="-6.32579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="22" value="-10.1051" />
                              <Key frame="30" value="-10.1051" />
                              <Key frame="37" value="-10.1051" />
                              <Key frame="203" value="-10.1051" />
                              <Key frame="211" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.35899" />
                              <Key frame="22" value="-5.35899" />
                              <Key frame="30" value="-4.91954" />
                              <Key frame="37" value="-4.91954" />
                              <Key frame="203" value="-4.91954" />
                              <Key frame="211" value="-5.35899" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="79.105" />
                              <Key frame="22" value="79.105" />
                              <Key frame="30" value="83.0601" />
                              <Key frame="37" value="83.0601" />
                              <Key frame="203" value="82.2691" />
                              <Key frame="211" value="83.0601" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.59429" />
                              <Key frame="22" value="-6.59429" />
                              <Key frame="30" value="-15.9108" />
                              <Key frame="37" value="-15.9108" />
                              <Key frame="203" value="-16.5261" />
                              <Key frame="211" value="-12.5709" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="8.87466" />
                              <Key frame="22" value="8.87466" />
                              <Key frame="30" value="87.4499" />
                              <Key frame="37" value="87.4499" />
                              <Key frame="203" value="88.5046" />
                              <Key frame="211" value="7.20472" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="10" indexofinput="2" outputowner="11" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Outro" id="9" localization="8" tooltip="Enter description here" x="1015" y="181">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Text Edit_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="SayText_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say Text" id="6" localization="8" tooltip="Say the text received on its input." x="309" y="28">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Text Edit" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="52" y="25">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Very good! \\pau=300\\\r\nThank you for joining me today! I hope you now feel inspired and motivated to practice these simple yoga poses in your daily life.\r\nDon\'t forget to practice regularly for the best results.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Very good! \pau=300\
Thank you for joining me today! I hope you now feel inspired and motivated to practice these simple yoga poses in your daily life.
Don't forget to practice regularly for the best results.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="wave" id="7" localization="8" tooltip="nao waves" x="556" y="158">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="90">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                            <BehaviorKeyframe name="keyframe29" index="29">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <BehaviorLayer name="behavior_layer2">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram />
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                              <Key frame="10" value="-4.74855" />
                              <Key frame="20" value="-4.74855" />
                              <Key frame="30" value="-4.74855" />
                              <Key frame="40" value="-4.74855" />
                              <Key frame="45" value="-4.74855" />
                              <Key frame="50" value="-4.74855" />
                              <Key frame="55" value="-4.74855" />
                              <Key frame="90" value="-4.74855" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                              <Key frame="10" value="-1.23289" />
                              <Key frame="20" value="-1.23289" />
                              <Key frame="30" value="-1.23289" />
                              <Key frame="40" value="-1.23289" />
                              <Key frame="45" value="-1.23289" />
                              <Key frame="50" value="-1.23289" />
                              <Key frame="55" value="-1.23289" />
                              <Key frame="90" value="-1.23289" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="10" value="5.00743" />
                              <Key frame="20" value="5.00743" />
                              <Key frame="30" value="5.00743" />
                              <Key frame="40" value="5.00743" />
                              <Key frame="45" value="5.00743" />
                              <Key frame="50" value="5.00743" />
                              <Key frame="55" value="5.00743" />
                              <Key frame="90" value="5.00743" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="10" value="-4.39218" />
                              <Key frame="20" value="-4.39218" />
                              <Key frame="30" value="-4.39218" />
                              <Key frame="40" value="-4.39218" />
                              <Key frame="45" value="-4.39218" />
                              <Key frame="50" value="-4.39218" />
                              <Key frame="55" value="-4.39218" />
                              <Key frame="90" value="-4.39218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="-34.5391" />
                              <Key frame="20" value="-43.4161" />
                              <Key frame="30" value="-31.5507" />
                              <Key frame="40" value="-87.0983" />
                              <Key frame="45" value="-68.1137" />
                              <Key frame="50" value="-87.0983" />
                              <Key frame="55" value="-68.1137" />
                              <Key frame="90" value="-18.8943" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="10" value="-104.418" />
                              <Key frame="20" value="-69.8" />
                              <Key frame="30" value="-120.326" />
                              <Key frame="40" value="-105.56" />
                              <Key frame="45" value="-120.59" />
                              <Key frame="50" value="-105.56" />
                              <Key frame="55" value="-120.59" />
                              <Key frame="90" value="-118.48" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="10" value="0.2636" />
                              <Key frame="20" value="1" />
                              <Key frame="30" value="1" />
                              <Key frame="40" value="1" />
                              <Key frame="45" value="1" />
                              <Key frame="50" value="1" />
                              <Key frame="55" value="1" />
                              <Key frame="90" value="0.2636" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="10" value="7.73688" />
                              <Key frame="20" value="7.73688" />
                              <Key frame="30" value="7.73688" />
                              <Key frame="40" value="7.73688" />
                              <Key frame="45" value="7.73688" />
                              <Key frame="50" value="7.73688" />
                              <Key frame="55" value="7.73688" />
                              <Key frame="90" value="7.73688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="10" value="2.1997" />
                              <Key frame="20" value="2.1997" />
                              <Key frame="30" value="2.1997" />
                              <Key frame="40" value="2.1997" />
                              <Key frame="45" value="2.1997" />
                              <Key frame="50" value="2.1997" />
                              <Key frame="55" value="2.1997" />
                              <Key frame="90" value="2.1997" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="10" value="-12.4782" />
                              <Key frame="20" value="-12.4782" />
                              <Key frame="30" value="-12.4782" />
                              <Key frame="40" value="-12.4782" />
                              <Key frame="45" value="-12.4782" />
                              <Key frame="50" value="-12.4782" />
                              <Key frame="55" value="-12.4782" />
                              <Key frame="90" value="-12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="10" value="-4.66066" />
                              <Key frame="20" value="-4.66066" />
                              <Key frame="30" value="-4.66066" />
                              <Key frame="40" value="-4.66066" />
                              <Key frame="45" value="-4.66066" />
                              <Key frame="50" value="-4.66066" />
                              <Key frame="55" value="-4.66066" />
                              <Key frame="90" value="-4.66066" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="10" value="83.9342" />
                              <Key frame="20" value="56.7756" />
                              <Key frame="30" value="42.9767" />
                              <Key frame="40" value="33.8359" />
                              <Key frame="45" value="42.713" />
                              <Key frame="50" value="33.8359" />
                              <Key frame="55" value="42.713" />
                              <Key frame="90" value="75.0571" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-6.59429" />
                              <Key frame="20" value="14.6755" />
                              <Key frame="30" value="40.0762" />
                              <Key frame="40" value="31.287" />
                              <Key frame="45" value="34.7148" />
                              <Key frame="50" value="31.287" />
                              <Key frame="55" value="34.7148" />
                              <Key frame="90" value="-4.13332" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="10" value="59.1487" />
                              <Key frame="20" value="45.4376" />
                              <Key frame="30" value="17.4002" />
                              <Key frame="40" value="31.7265" />
                              <Key frame="45" value="22.2342" />
                              <Key frame="50" value="31.7265" />
                              <Key frame="55" value="22.2342" />
                              <Key frame="90" value="60.0277" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="10" value="4.83644" />
                              <Key frame="20" value="4.83644" />
                              <Key frame="30" value="4.83644" />
                              <Key frame="40" value="4.83644" />
                              <Key frame="45" value="4.83644" />
                              <Key frame="50" value="4.83644" />
                              <Key frame="55" value="4.83644" />
                              <Key frame="90" value="4.83644" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="10" value="8.79157" />
                              <Key frame="20" value="8.79157" />
                              <Key frame="30" value="8.79157" />
                              <Key frame="40" value="8.79157" />
                              <Key frame="45" value="8.79157" />
                              <Key frame="50" value="8.79157" />
                              <Key frame="55" value="8.79157" />
                              <Key frame="90" value="8.79157" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="10" value="19.3386" />
                              <Key frame="20" value="18.8112" />
                              <Key frame="30" value="18.8112" />
                              <Key frame="40" value="18.8112" />
                              <Key frame="45" value="18.196" />
                              <Key frame="50" value="18.8112" />
                              <Key frame="55" value="18.196" />
                              <Key frame="90" value="19.3386" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="10" value="68.2895" />
                              <Key frame="20" value="68.2895" />
                              <Key frame="30" value="68.2895" />
                              <Key frame="40" value="68.2895" />
                              <Key frame="45" value="68.2895" />
                              <Key frame="50" value="68.2895" />
                              <Key frame="55" value="68.2895" />
                              <Key frame="90" value="68.2895" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="10" value="0.2728" />
                              <Key frame="20" value="0.2728" />
                              <Key frame="30" value="0.2728" />
                              <Key frame="40" value="0.2728" />
                              <Key frame="45" value="0.2728" />
                              <Key frame="50" value="0.2728" />
                              <Key frame="55" value="0.2728" />
                              <Key frame="90" value="0.2728" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="10" value="6.85315" />
                              <Key frame="20" value="6.85315" />
                              <Key frame="30" value="6.85315" />
                              <Key frame="40" value="6.85315" />
                              <Key frame="45" value="6.85315" />
                              <Key frame="50" value="6.85315" />
                              <Key frame="55" value="6.85315" />
                              <Key frame="90" value="6.85315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="10" value="-9.13833" />
                              <Key frame="20" value="-9.13833" />
                              <Key frame="30" value="-9.13833" />
                              <Key frame="40" value="-9.13833" />
                              <Key frame="45" value="-9.13833" />
                              <Key frame="50" value="-9.13833" />
                              <Key frame="55" value="-9.13833" />
                              <Key frame="90" value="-9.13833" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="10" value="-12.4782" />
                              <Key frame="20" value="-12.4782" />
                              <Key frame="30" value="-12.4782" />
                              <Key frame="40" value="-12.4782" />
                              <Key frame="45" value="-12.4782" />
                              <Key frame="50" value="-12.4782" />
                              <Key frame="55" value="-12.4782" />
                              <Key frame="90" value="-12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="10" value="-4.65585" />
                              <Key frame="20" value="-4.65585" />
                              <Key frame="30" value="-4.65585" />
                              <Key frame="40" value="-4.65585" />
                              <Key frame="45" value="-4.65585" />
                              <Key frame="50" value="-4.65585" />
                              <Key frame="55" value="-4.65585" />
                              <Key frame="90" value="-4.65585" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="10" value="82.5327" />
                              <Key frame="20" value="82.5327" />
                              <Key frame="30" value="82.5327" />
                              <Key frame="40" value="82.5327" />
                              <Key frame="45" value="82.5327" />
                              <Key frame="50" value="82.5327" />
                              <Key frame="55" value="82.5327" />
                              <Key frame="90" value="82.5327" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="10" value="-1.49656" />
                              <Key frame="20" value="-1.49656" />
                              <Key frame="30" value="-1.49656" />
                              <Key frame="40" value="-1.49656" />
                              <Key frame="45" value="-0.793436" />
                              <Key frame="50" value="-1.49656" />
                              <Key frame="55" value="-0.793436" />
                              <Key frame="90" value="-1.49656" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="10" value="-4.92435" />
                              <Key frame="20" value="-4.92435" />
                              <Key frame="30" value="-4.92435" />
                              <Key frame="40" value="-4.92435" />
                              <Key frame="45" value="-4.92435" />
                              <Key frame="50" value="-4.92435" />
                              <Key frame="55" value="-4.92435" />
                              <Key frame="90" value="-4.92435" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="550" y="37">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Bye Bye! See you!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="3" />
                      <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="7" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Play Sound" id="6" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="273" y="229">
              <bitmap>media/images/box/interaction/play_music.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
              <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../yoga_music.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
              <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
              <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="19" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
              <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
              <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                        <bitmap>media/images/box/interaction/play_music.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                        <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                        <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                        <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                      </Box>
                      <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                        <bitmap>media/images/box/folder.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                        <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Audio player" type="Lock" timeout="0" />
            </Box>
            <Box name="Disable SafeGuard/Awareness" id="11" localization="8" tooltip="" x="150" y="231">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        life = ALProxy("ALAutonomousLife")
        life.setSafeguardEnabled("RobotFell", False)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Reset Awareness" id="8" localization="8" tooltip="" x="1108" y="305">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        aware = ALProxy("ALBasicAwareness")
        aware.setStimulusDetectionEnabled("People", True)
        aware.setStimulusDetectionEnabled("Sound", True)
        aware.setStimulusDetectionEnabled("Movement", True)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Basic Awareness" id="12" localization="8" tooltip="This box is an interface to the module ALBasicAwareness.&#x0A;&#x0A;It is a simple way to make the robot establish and keep eye contact with people.&#x0A;&#x0A;V1.1.0" x="148" y="359">
              <bitmap>media/images/box/tracker/basicawareness.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        try:
            self.awareness = self.session().service('ALBasicAwareness')
        except Exception as e:
            self.awareness = None
            self.logger.error(e)

        self.memory = self.session().service('ALMemory')

        self.isRunning = False
        self.trackedHuman = -1

        import threading
        self.subscribingLock = threading.Lock()

        self.BIND_PYTHON(self.getName(), "setParameter")


    def onUnload(self):
        if self.isRunning:
            if self.awareness:
                self.awareness.stopAwareness()
                self.setALMemorySubscription(False)
            self.isRunning = False


    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do

        self.isRunning = True
        self.trackedHuman = -1
        if self.awareness:
            self.awareness.setEngagementMode(self.getParameter('Engagement Mode'))
            self.awareness.setTrackingMode(self.getParameter('Tracking Mode'))
            self.awareness.setStimulusDetectionEnabled('Sound', self.getParameter('Sound Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Movement', self.getParameter('Movement Stimulus'))
            self.awareness.setStimulusDetectionEnabled('People', self.getParameter('People Stimulus'))
            self.awareness.setStimulusDetectionEnabled('Touch', self.getParameter('Touch Stimulus'))
            self.setALMemorySubscription(True)
            self.awareness.startAwareness()



    def onInput_onStop(self):
        if not self.isRunning:
            return # already stopped, nothing to do

        self.onUnload()
        self.onStopped()


    def setParameter(self, parameterName, newValue):
        GeneratedClass.setParameter(self, parameterName, newValue)

        if self.awareness:
            if parameterName == 'Sound Stimulus':
                self.awareness.setStimulusDetectionEnabled('Sound', newValue)
            elif parameterName == 'Movement Stimulus':
                self.awareness.setStimulusDetectionEnabled('Movement', newValue)
            elif parameterName == 'People Stimulus':
                self.awareness.setStimulusDetectionEnabled('People', newValue)
            elif parameterName == 'Touch Stimulus':
                self.awareness.setStimulusDetectionEnabled('Touch', newValue)


    # callbacks for ALBasicAwareness events
    def onStimulusDetected(self, eventName, stimulusName, subscriberIdentifier):
        self.StimulusDetected(stimulusName)

    def onHumanTracked(self, eventName, humanID, subscriberIdentifier):
        self.trackedHuman = humanID
        self.HumanTracked(humanID)

    def onHumanLost(self, eventName, subscriberIdentifier):
        self.HumanLost(self.trackedHuman)
        self.trackedHuman = -1


    def setALMemorySubscription(self, subscribe):
        self.subscribingLock.acquire()
        if subscribe:
            self.memory.subscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName(), 'onStimulusDetected')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanTracked', self.getName(), 'onHumanTracked')
            self.memory.subscribeToEvent('ALBasicAwareness/HumanLost', self.getName(), 'onHumanLost')
        else:
            self.memory.unsubscribeToEvent('ALBasicAwareness/StimulusDetected', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanTracked', self.getName())
            self.memory.unsubscribeToEvent('ALBasicAwareness/HumanLost', self.getName())

        self.subscribingLock.release()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the Basic Awareness with the given Engagement and Tracking mode parameters, using the given stimuli." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the Basic Awareness." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="StimulusDetected" type="3" type_size="1" nature="2" inner="0" tooltip="This output is stimulated when BasicAwareness detects a stimulus amongst the tracked stimulus.&#x0A;&#x0A;The output data is the stimulus&apos; name." id="5" />
              <Output name="HumanTracked" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when ALBasicAwareness detects a stimulus that is confirmed to be a human.&#x0A;&#x0A;The output data is the ID corresponding to the tracked human. It is shared with PeoplePerception and can be used there. This output is triggered with -1 if ALBasicAwareness tried to detect a human but failed." id="6" />
              <Output name="HumanLost" type="2" type_size="1" nature="2" inner="0" tooltip="This output is triggered when the human currently tracked is lost.&#x0A;&#x0A; The output data is the ID corresponding to the lost human. It can be reused in PeoplePerception." id="7" />
              <Parameter name="Engagement Mode" inherits_from_parent="0" content_type="3" value="FullyEngaged" default_value="Unengaged" custom_choice="0" tooltip='The engagement mode specifies how &quot;focused&quot; the robot is on the engaged person.' id="8">
                <Choice value="Unengaged" />
                <Choice value="FullyEngaged" />
                <Choice value="SemiEngaged" />
              </Parameter>
              <Parameter name="Tracking Mode" inherits_from_parent="0" content_type="3" value="Head" default_value="Head" custom_choice="0" tooltip="The tracking mode describes how the robot keeps eye contact with an engaged person." id="9">
                <Choice value="Head" />
                <Choice value="BodyRotation" />
                <Choice value="WholeBody" />
              </Parameter>
              <Parameter name="Sound Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="10" />
              <Parameter name="Movement Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="11" />
              <Parameter name="People Stimulus" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="12" />
              <Parameter name="Touch Stimulus" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="" id="13" />
            </Box>
            <Box name="Tadasana" id="10" localization="8" tooltip="Enter description here" x="273" y="92">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Tadasana (1)_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Say_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="tadasana" default_value="tadasana" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="100">
                      <Box name="Tadasana (1)" id="8" localization="8" tooltip="NAO stands in Tadasana position (mountain stand).&#x0A;Straight back and legs, arms stretched out and palms facing forward." x="344" y="59">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="5" start_frame="1" end_frame="-1" size="557">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="295" y="48">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="41" y="45">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("The first exercise is called Tadasana, or mountain pose.\r\n\r\nTadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.\r\n\r\nStand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.\r\n\r\nHold this position for five breaths. Just breathe normally, the breaths don\'t have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.\r\n\r\nI\'ll count for you.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[The first exercise is called Tadasana, or mountain pose.

Tadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.

Stand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.

Hold this position for five breaths. Just breathe normally, the breaths don't have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.

I'll count for you.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="409" y="53">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="533" y="50">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="24" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="122" value="5.88634" />
                              <Key frame="128" value="5.62267" />
                              <Key frame="294" value="5.62267" />
                              <Key frame="300" value="5.62267" />
                              <Key frame="552" value="5.62267" />
                              <Key frame="557" value="5.00743" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.4137" />
                              <Key frame="122" value="-6.4137" />
                              <Key frame="128" value="-6.94104" />
                              <Key frame="294" value="-6.94104" />
                              <Key frame="300" value="-6.94104" />
                              <Key frame="552" value="-6.94104" />
                              <Key frame="557" value="-6.4137" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-21.8826" />
                              <Key frame="122" value="-21.8826" />
                              <Key frame="128" value="-12.8298" />
                              <Key frame="294" value="-12.8298" />
                              <Key frame="300" value="-12.8298" />
                              <Key frame="552" value="-12.2146" />
                              <Key frame="557" value="-22.7616" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-69.1732" />
                              <Key frame="122" value="-69.1732" />
                              <Key frame="128" value="-70.5795" />
                              <Key frame="294" value="-70.5795" />
                              <Key frame="300" value="-70.5795" />
                              <Key frame="552" value="-70.5795" />
                              <Key frame="557" value="-69.1732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="122" value="0.2892" />
                              <Key frame="128" value="0.7588" />
                              <Key frame="294" value="0.7588" />
                              <Key frame="300" value="0.7588" />
                              <Key frame="552" value="0.7692" />
                              <Key frame="557" value="0.3088" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.82477" />
                              <Key frame="122" value="7.82477" />
                              <Key frame="128" value="7.64898" />
                              <Key frame="294" value="7.64898" />
                              <Key frame="300" value="7.64898" />
                              <Key frame="552" value="7.64898" />
                              <Key frame="557" value="7.82477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="122" value="6.68218" />
                              <Key frame="128" value="6.24271" />
                              <Key frame="294" value="6.24271" />
                              <Key frame="300" value="6.24271" />
                              <Key frame="552" value="6.24271" />
                              <Key frame="557" value="6.68218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="122" value="-10.1051" />
                              <Key frame="128" value="-10.1051" />
                              <Key frame="294" value="-10.1051" />
                              <Key frame="300" value="-10.1051" />
                              <Key frame="552" value="-10.1051" />
                              <Key frame="557" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.83644" />
                              <Key frame="122" value="-4.83644" />
                              <Key frame="128" value="-5.3638" />
                              <Key frame="294" value="-5.3638" />
                              <Key frame="300" value="-5.3638" />
                              <Key frame="552" value="-5.3638" />
                              <Key frame="557" value="-4.83644" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="80.2427" />
                              <Key frame="122" value="80.2427" />
                              <Key frame="128" value="84.0221" />
                              <Key frame="294" value="84.0221" />
                              <Key frame="300" value="84.0221" />
                              <Key frame="552" value="84.0221" />
                              <Key frame="557" value="83.1432" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="13.1813" />
                              <Key frame="122" value="13.1813" />
                              <Key frame="128" value="13.8845" />
                              <Key frame="294" value="13.8845" />
                              <Key frame="300" value="13.0056" />
                              <Key frame="552" value="14.1482" />
                              <Key frame="557" value="12.2146" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="3.68905" />
                              <Key frame="122" value="3.68905" />
                              <Key frame="128" value="-100.111" />
                              <Key frame="294" value="-100.111" />
                              <Key frame="300" value="-100.111" />
                              <Key frame="552" value="-101.166" />
                              <Key frame="557" value="4.48007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="6.3306" />
                              <Key frame="122" value="6.3306" />
                              <Key frame="128" value="5.62747" />
                              <Key frame="294" value="5.62747" />
                              <Key frame="300" value="5.62747" />
                              <Key frame="552" value="5.71537" />
                              <Key frame="557" value="5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.15482" />
                              <Key frame="122" value="6.15482" />
                              <Key frame="128" value="6.3306" />
                              <Key frame="294" value="6.3306" />
                              <Key frame="300" value="6.3306" />
                              <Key frame="552" value="6.3306" />
                              <Key frame="557" value="6.15482" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="22.3269" />
                              <Key frame="122" value="22.3269" />
                              <Key frame="128" value="8.26423" />
                              <Key frame="294" value="8.26423" />
                              <Key frame="300" value="8.26423" />
                              <Key frame="552" value="7.64898" />
                              <Key frame="557" value="22.5906" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="71.3657" />
                              <Key frame="122" value="71.3657" />
                              <Key frame="128" value="75.9361" />
                              <Key frame="294" value="75.9361" />
                              <Key frame="300" value="75.9361" />
                              <Key frame="552" value="76.9908" />
                              <Key frame="557" value="69.9594" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="122" value="0.294" />
                              <Key frame="128" value="0.794" />
                              <Key frame="294" value="0.794" />
                              <Key frame="300" value="0.794" />
                              <Key frame="552" value="0.804" />
                              <Key frame="557" value="0.3092" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="122" value="6.85315" />
                              <Key frame="128" value="6.76526" />
                              <Key frame="294" value="6.76526" />
                              <Key frame="300" value="6.76526" />
                              <Key frame="552" value="6.76526" />
                              <Key frame="557" value="6.85315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="122" value="-6.32579" />
                              <Key frame="128" value="-6.32579" />
                              <Key frame="294" value="-6.32579" />
                              <Key frame="300" value="-6.32579" />
                              <Key frame="552" value="-6.32579" />
                              <Key frame="557" value="-6.32579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="122" value="-10.1051" />
                              <Key frame="128" value="-10.1051" />
                              <Key frame="294" value="-10.1051" />
                              <Key frame="300" value="-10.1051" />
                              <Key frame="552" value="-10.1051" />
                              <Key frame="557" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.35899" />
                              <Key frame="122" value="-5.35899" />
                              <Key frame="128" value="-4.91954" />
                              <Key frame="294" value="-4.91954" />
                              <Key frame="300" value="-4.91954" />
                              <Key frame="552" value="-4.91954" />
                              <Key frame="557" value="-5.35899" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="79.105" />
                              <Key frame="122" value="79.105" />
                              <Key frame="128" value="83.0601" />
                              <Key frame="294" value="83.0601" />
                              <Key frame="300" value="83.0601" />
                              <Key frame="552" value="82.2691" />
                              <Key frame="557" value="83.0601" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.59429" />
                              <Key frame="122" value="-6.59429" />
                              <Key frame="128" value="-15.9108" />
                              <Key frame="294" value="-15.9108" />
                              <Key frame="300" value="-15.9108" />
                              <Key frame="552" value="-16.5261" />
                              <Key frame="557" value="-12.5709" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="8.87466" />
                              <Key frame="122" value="8.87466" />
                              <Key frame="128" value="87.4499" />
                              <Key frame="294" value="87.4499" />
                              <Key frame="300" value="87.4499" />
                              <Key frame="552" value="88.5046" />
                              <Key frame="557" value="7.20472" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Say" id="9" localization="8" tooltip="Say some text. The text can be localized." x="730" y="48">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="94" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Tadasana is an effective pose to improve your posture and relaxation. We continue with Virabhadrasana one, known as warrior one." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="511" y="55">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="9" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="63" y="267">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("The first exercise is called Tadasana, or mountain pose.\r\n\r\nTadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[The first exercise is called Tadasana, or mountain pose.

Tadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say (1)" id="1" localization="8" tooltip="Say some text. The text can be localized." x="335" y="256">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="94" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Tadasana is an effective pose to improve your posture and relaxation. We continue with Virabhadrasana one, known as warrior one." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Tadasana Start" id="3" localization="8" tooltip="NAO stands in Tadasana position (mountain stand).&#x0A;Straight back and legs, arms stretched out and palms facing forward." x="479" y="256">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="2000">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="295" y="48">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="41" y="45">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.\r\n\r\nHold this position for five breaths. Just breathe normally, the breaths don\'t have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.\r\n\r\nI\'ll count for you.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Stand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.

Hold this position for five breaths. Just breathe normally, the breaths don't have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.

I'll count for you.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="409" y="53">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="533" y="50">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="24" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="10" value="5.62267" />
                              <Key frame="2000" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.4137" />
                              <Key frame="10" value="-6.94104" />
                              <Key frame="2000" value="-6.94104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-21.8826" />
                              <Key frame="10" value="-12.8298" />
                              <Key frame="2000" value="-12.8298" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-69.1732" />
                              <Key frame="10" value="-70.5795" />
                              <Key frame="2000" value="-70.5795" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="10" value="0.7588" />
                              <Key frame="2000" value="0.7588" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.82477" />
                              <Key frame="10" value="7.64898" />
                              <Key frame="2000" value="7.64898" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="10" value="6.24271" />
                              <Key frame="2000" value="6.24271" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="10" value="-10.1051" />
                              <Key frame="2000" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.83644" />
                              <Key frame="10" value="-5.3638" />
                              <Key frame="2000" value="-5.3638" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="80.2427" />
                              <Key frame="10" value="84.0221" />
                              <Key frame="2000" value="84.0221" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="13.1813" />
                              <Key frame="10" value="13.8845" />
                              <Key frame="2000" value="13.8845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="3.68905" />
                              <Key frame="10" value="-100.111" />
                              <Key frame="2000" value="-100.111" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="6.3306" />
                              <Key frame="10" value="5.62747" />
                              <Key frame="2000" value="5.62747" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.15482" />
                              <Key frame="10" value="6.3306" />
                              <Key frame="2000" value="6.3306" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="22.3269" />
                              <Key frame="10" value="8.26423" />
                              <Key frame="2000" value="8.26423" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="71.3657" />
                              <Key frame="10" value="75.9361" />
                              <Key frame="2000" value="75.9361" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="10" value="0.794" />
                              <Key frame="2000" value="0.794" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="10" value="6.76526" />
                              <Key frame="2000" value="6.76526" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="10" value="-6.32579" />
                              <Key frame="2000" value="-6.32579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="10" value="-10.1051" />
                              <Key frame="2000" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.35899" />
                              <Key frame="10" value="-4.91954" />
                              <Key frame="2000" value="-4.91954" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="79.105" />
                              <Key frame="10" value="83.0601" />
                              <Key frame="2000" value="83.0601" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.59429" />
                              <Key frame="10" value="-15.9108" />
                              <Key frame="2000" value="-15.9108" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="8.87466" />
                              <Key frame="10" value="87.4499" />
                              <Key frame="2000" value="87.4499" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Tadasana Stop" id="4" localization="8" tooltip="NAO stands in Tadasana position (mountain stand).&#x0A;Straight back and legs, arms stretched out and palms facing forward." x="619" y="257">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="10">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Wait" id="7" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="333" y="48">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.62267" />
                              <Key frame="10" value="5.00743" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.94104" />
                              <Key frame="10" value="-6.4137" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-12.2146" />
                              <Key frame="10" value="-22.7616" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-70.5795" />
                              <Key frame="10" value="-69.1732" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.7692" />
                              <Key frame="10" value="0.3088" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.64898" />
                              <Key frame="10" value="7.82477" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.24271" />
                              <Key frame="10" value="6.68218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="10" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.3638" />
                              <Key frame="10" value="-4.83644" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="84.0221" />
                              <Key frame="10" value="83.1432" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="14.1482" />
                              <Key frame="10" value="12.2146" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-101.166" />
                              <Key frame="10" value="4.48007" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.71537" />
                              <Key frame="10" value="5.01224" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.3306" />
                              <Key frame="10" value="6.15482" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="7.64898" />
                              <Key frame="10" value="22.5906" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="76.9908" />
                              <Key frame="10" value="69.9594" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.804" />
                              <Key frame="10" value="0.3092" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.76526" />
                              <Key frame="10" value="6.85315" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="10" value="-6.32579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.1051" />
                              <Key frame="10" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-4.91954" />
                              <Key frame="10" value="-5.35899" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="82.2691" />
                              <Key frame="10" value="83.0601" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-16.5261" />
                              <Key frame="10" value="-12.5709" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="88.5046" />
                              <Key frame="10" value="7.20472" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="760" y="260">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Link inputowner="9" indexofinput="2" outputowner="6" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="8" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Warrior II" id="3" localization="8" tooltip="Enter description here" x="519" y="92">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Warrior I Rechts_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Say2_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="warrior_2" default_value="warrior" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say (2)" id="12" localization="8" tooltip="Say some text. The text can be localized." x="228" y="82">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Virabhadrasana one is a good pose to strengthen the legs, arms and shoulders and improve posture. We move on to Virabhadrasana two, known as warrior two." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Warrior II " id="2" localization="8" tooltip="Timeline for the Yoga Pose Warrior II." x="91" y="87">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="871">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="84.0896">
                                <Box name="Say Text (1)" id="3" localization="8" tooltip="Say the text received on its input." x="410" y="159">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (1)" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="152" y="70">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.\r\n\r\nStep your left leg out to the side with a wide step \\pau=300\\ and turn your right foot out ninety degrees. \\pau=300\\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.\r\n\r\nHold this position for five breaths. Focus your attention on your breathing and posture.\r\nI\'m counting for you.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.

Step your left leg out to the side with a wide step \pau=300\ and turn your right foot out ninety degrees. \pau=300\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.

Hold this position for five breaths. Focus your attention on your breathing and posture.
I'm counting for you.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="608" y="157">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="24" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-25.8426" />
                              <Key frame="216" value="4.31952" />
                              <Key frame="231" value="-50.5401" />
                              <Key frame="244" value="-33.4892" />
                              <Key frame="258" value="-33.4892" />
                              <Key frame="835" value="-33.4892" />
                              <Key frame="850" value="-33.4892" />
                              <Key frame="861" value="-50.5401" />
                              <Key frame="871" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-5.71056" />
                              <Key frame="216" value="-4.87288" />
                              <Key frame="231" value="-5.79845" />
                              <Key frame="244" value="-23.1131" />
                              <Key frame="258" value="-23.1131" />
                              <Key frame="835" value="-23.1131" />
                              <Key frame="850" value="-23.1131" />
                              <Key frame="861" value="-5.79845" />
                              <Key frame="871" value="-6.67737" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-20.0369" />
                              <Key frame="216" value="-34.0072" />
                              <Key frame="231" value="-5.71056" />
                              <Key frame="244" value="-5.44688" />
                              <Key frame="258" value="-5.44688" />
                              <Key frame="835" value="-5.44688" />
                              <Key frame="850" value="-5.44688" />
                              <Key frame="861" value="-5.71056" />
                              <Key frame="871" value="-22.7616" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.4154" />
                              <Key frame="216" value="-68.9143" />
                              <Key frame="231" value="-67.7669" />
                              <Key frame="244" value="-67.7669" />
                              <Key frame="258" value="-67.7669" />
                              <Key frame="835" value="-67.7669" />
                              <Key frame="850" value="-67.7669" />
                              <Key frame="861" value="-67.7669" />
                              <Key frame="871" value="-67.7669" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2996" />
                              <Key frame="216" value="0.346076" />
                              <Key frame="231" value="0.2892" />
                              <Key frame="244" value="0.2892" />
                              <Key frame="258" value="1" />
                              <Key frame="835" value="1" />
                              <Key frame="850" value="0.2892" />
                              <Key frame="861" value="0.2892" />
                              <Key frame="871" value="0.2892" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-37.3516" />
                              <Key frame="216" value="10.2245" />
                              <Key frame="231" value="-37.6153" />
                              <Key frame="244" value="-37.7032" />
                              <Key frame="258" value="-37.7032" />
                              <Key frame="835" value="-37.7032" />
                              <Key frame="850" value="-37.7032" />
                              <Key frame="861" value="-37.6153" />
                              <Key frame="871" value="7.73688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="4.74855" />
                              <Key frame="216" value="4.96574" />
                              <Key frame="231" value="5.10013" />
                              <Key frame="244" value="24.9637" />
                              <Key frame="258" value="24.9637" />
                              <Key frame="835" value="24.9637" />
                              <Key frame="850" value="24.9637" />
                              <Key frame="861" value="5.10013" />
                              <Key frame="871" value="6.59429" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="216" value="-9.30981" />
                              <Key frame="231" value="-13.5329" />
                              <Key frame="244" value="-20.3006" />
                              <Key frame="258" value="-20.3006" />
                              <Key frame="835" value="-20.3006" />
                              <Key frame="850" value="-20.3006" />
                              <Key frame="861" value="-13.5329" />
                              <Key frame="871" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="68.5531" />
                              <Key frame="216" value="-5.05449" />
                              <Key frame="231" value="97.4695" />
                              <Key frame="244" value="79.0123" />
                              <Key frame="258" value="79.0123" />
                              <Key frame="835" value="79.0123" />
                              <Key frame="850" value="79.0123" />
                              <Key frame="861" value="97.4695" />
                              <Key frame="871" value="-4.92435" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.4984" />
                              <Key frame="216" value="85.9415" />
                              <Key frame="231" value="69.1684" />
                              <Key frame="244" value="68.1137" />
                              <Key frame="258" value="68.1137" />
                              <Key frame="835" value="68.1137" />
                              <Key frame="850" value="68.1137" />
                              <Key frame="861" value="69.1684" />
                              <Key frame="871" value="82.7037" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="9.5778" />
                              <Key frame="216" value="11.5587" />
                              <Key frame="231" value="21.7068" />
                              <Key frame="244" value="23.2889" />
                              <Key frame="258" value="72.4204" />
                              <Key frame="835" value="72.4204" />
                              <Key frame="850" value="23.2889" />
                              <Key frame="861" value="21.7068" />
                              <Key frame="871" value="11.9509" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-7.91266" />
                              <Key frame="216" value="6.1847" />
                              <Key frame="231" value="-22.0632" />
                              <Key frame="244" value="-20.7449" />
                              <Key frame="258" value="0.876518" />
                              <Key frame="835" value="0.876518" />
                              <Key frame="850" value="-20.7449" />
                              <Key frame="861" value="-22.0632" />
                              <Key frame="871" value="4.74374" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-32.166" />
                              <Key frame="216" value="4.29628" />
                              <Key frame="231" value="-53.26" />
                              <Key frame="244" value="-49.3049" />
                              <Key frame="258" value="-49.3049" />
                              <Key frame="835" value="-49.3049" />
                              <Key frame="850" value="-49.3049" />
                              <Key frame="861" value="-53.26" />
                              <Key frame="871" value="5.62747" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="216" value="6.27882" />
                              <Key frame="231" value="3.34228" />
                              <Key frame="244" value="6.85796" />
                              <Key frame="258" value="6.85796" />
                              <Key frame="835" value="6.85796" />
                              <Key frame="850" value="6.85796" />
                              <Key frame="861" value="3.34228" />
                              <Key frame="871" value="6.24271" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="21.8875" />
                              <Key frame="216" value="30.4218" />
                              <Key frame="231" value="10.7252" />
                              <Key frame="244" value="10.3736" />
                              <Key frame="258" value="10.9889" />
                              <Key frame="835" value="10.9889" />
                              <Key frame="850" value="10.3736" />
                              <Key frame="861" value="10.7252" />
                              <Key frame="871" value="22.6785" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="70.2231" />
                              <Key frame="216" value="74.9608" />
                              <Key frame="231" value="72.5083" />
                              <Key frame="244" value="71.8051" />
                              <Key frame="258" value="74.2" />
                              <Key frame="835" value="72.5962" />
                              <Key frame="850" value="71.8051" />
                              <Key frame="861" value="72.5083" />
                              <Key frame="871" value="69.9594" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="216" value="0.365027" />
                              <Key frame="231" value="0.284" />
                              <Key frame="244" value="0.284" />
                              <Key frame="258" value="1" />
                              <Key frame="835" value="1" />
                              <Key frame="850" value="0.284" />
                              <Key frame="861" value="0.284" />
                              <Key frame="871" value="0.284" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-35.8622" />
                              <Key frame="216" value="9.53326" />
                              <Key frame="231" value="-39.1142" />
                              <Key frame="244" value="-38.7627" />
                              <Key frame="258" value="-38.7627" />
                              <Key frame="835" value="-38.7627" />
                              <Key frame="850" value="-38.7627" />
                              <Key frame="861" value="-39.1142" />
                              <Key frame="871" value="6.76526" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.11683" />
                              <Key frame="216" value="-6.68795" />
                              <Key frame="231" value="-5.09532" />
                              <Key frame="244" value="-9.13833" />
                              <Key frame="258" value="-9.13833" />
                              <Key frame="835" value="-9.13833" />
                              <Key frame="850" value="-9.13833" />
                              <Key frame="861" value="-5.09532" />
                              <Key frame="871" value="-6.50159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="216" value="-9.30981" />
                              <Key frame="231" value="-13.5329" />
                              <Key frame="244" value="-20.3006" />
                              <Key frame="258" value="-20.3006" />
                              <Key frame="835" value="-20.3006" />
                              <Key frame="850" value="-20.3006" />
                              <Key frame="861" value="-13.5329" />
                              <Key frame="871" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="71.7221" />
                              <Key frame="216" value="-5.04407" />
                              <Key frame="231" value="99.1443" />
                              <Key frame="244" value="94.7497" />
                              <Key frame="258" value="94.7497" />
                              <Key frame="835" value="94.7497" />
                              <Key frame="850" value="94.7497" />
                              <Key frame="861" value="99.1443" />
                              <Key frame="871" value="-5.79845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="69.349" />
                              <Key frame="216" value="85.3312" />
                              <Key frame="231" value="73.9193" />
                              <Key frame="244" value="74.4467" />
                              <Key frame="258" value="71.1068" />
                              <Key frame="835" value="71.1068" />
                              <Key frame="850" value="74.4467" />
                              <Key frame="861" value="73.9193" />
                              <Key frame="871" value="81.3023" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.70368" />
                              <Key frame="216" value="-9.79697" />
                              <Key frame="231" value="-19.5144" />
                              <Key frame="244" value="-21.0964" />
                              <Key frame="258" value="-74.0072" />
                              <Key frame="835" value="-74.0072" />
                              <Key frame="850" value="-21.0964" />
                              <Key frame="861" value="-19.5144" />
                              <Key frame="871" value="-4.04543" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="216" value="8.47026" />
                              <Key frame="231" value="16.6091" />
                              <Key frame="244" value="15.4665" />
                              <Key frame="258" value="-5.18802" />
                              <Key frame="835" value="-5.18802" />
                              <Key frame="850" value="15.4665" />
                              <Key frame="861" value="16.6091" />
                              <Key frame="871" value="7.3805" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="912" y="265">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                        <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                        <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                        <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                      </Box>
                      <Box name="Text Edit" id="1" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="95" y="268">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.")]]>
                          </content>
                        </script>
                        <pluginContent>
                          <text>
                            <![CDATA[Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.]]>
                          </text>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                      </Box>
                      <Box name="Say" id="3" localization="8" tooltip="Say some text. The text can be localized." x="350" y="267">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="94" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Tadasana is an effective pose to improve your posture and relaxation. We continue with Virabhadrasana one, known as warrior one." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Warrior II  Start" id="4" localization="8" tooltip="Timeline for the Yoga Pose Warrior II." x="575" y="269">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="1000">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="84.0896">
                                <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="422" y="102">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit (1)" id="4" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="152" y="70">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Step your left leg out to the side with a wide step \\pau=300\\ and turn your right foot out ninety degrees. \\pau=300\\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.\r\n\r\nHold this position for five breaths. Focus your attention on your breathing and posture.\r\nI\'m counting for you.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Step your left leg out to the side with a wide step \pau=300\ and turn your right foot out ninety degrees. \pau=300\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.

Hold this position for five breaths. Focus your attention on your breathing and posture.
I'm counting for you.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="706" y="104">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="559" y="101">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="3" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                                <Link inputowner="10" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="24" indexofinput="2" outputowner="10" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-25.8426" />
                              <Key frame="19" value="-50.5401" />
                              <Key frame="43" value="-33.4892" />
                              <Key frame="65" value="-33.4892" />
                              <Key frame="1000" value="-33.4892" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-5.71056" />
                              <Key frame="19" value="-5.79845" />
                              <Key frame="43" value="-23.1131" />
                              <Key frame="65" value="-23.1131" />
                              <Key frame="1000" value="-23.1131" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-20.0369" />
                              <Key frame="19" value="-5.71056" />
                              <Key frame="43" value="-5.44688" />
                              <Key frame="65" value="-5.44688" />
                              <Key frame="1000" value="-5.44688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.4154" />
                              <Key frame="19" value="-67.7669" />
                              <Key frame="43" value="-67.7669" />
                              <Key frame="65" value="-67.7669" />
                              <Key frame="1000" value="-67.7669" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2996" />
                              <Key frame="19" value="0.2892" />
                              <Key frame="43" value="0.2892" />
                              <Key frame="65" value="1" />
                              <Key frame="1000" value="1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-37.3516" />
                              <Key frame="19" value="-37.6153" />
                              <Key frame="43" value="-37.7032" />
                              <Key frame="65" value="-37.7032" />
                              <Key frame="1000" value="-37.7032" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="4.74855" />
                              <Key frame="19" value="5.10013" />
                              <Key frame="43" value="24.9637" />
                              <Key frame="65" value="24.9637" />
                              <Key frame="1000" value="24.9637" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="19" value="-13.5329" />
                              <Key frame="43" value="-20.3006" />
                              <Key frame="65" value="-20.3006" />
                              <Key frame="1000" value="-20.3006" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="68.5531" />
                              <Key frame="19" value="97.4695" />
                              <Key frame="43" value="79.0123" />
                              <Key frame="65" value="79.0123" />
                              <Key frame="1000" value="79.0123" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.4984" />
                              <Key frame="19" value="69.1684" />
                              <Key frame="43" value="68.1137" />
                              <Key frame="65" value="68.1137" />
                              <Key frame="1000" value="68.1137" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="9.5778" />
                              <Key frame="19" value="21.7068" />
                              <Key frame="43" value="23.2889" />
                              <Key frame="65" value="72.4204" />
                              <Key frame="1000" value="72.4204" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-7.91266" />
                              <Key frame="19" value="-22.0632" />
                              <Key frame="43" value="-20.7449" />
                              <Key frame="65" value="0.876518" />
                              <Key frame="1000" value="0.876518" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-32.166" />
                              <Key frame="19" value="-53.26" />
                              <Key frame="43" value="-49.3049" />
                              <Key frame="65" value="-49.3049" />
                              <Key frame="1000" value="-49.3049" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="19" value="3.34228" />
                              <Key frame="43" value="6.85796" />
                              <Key frame="65" value="6.85796" />
                              <Key frame="1000" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="21.8875" />
                              <Key frame="19" value="10.7252" />
                              <Key frame="43" value="10.3736" />
                              <Key frame="65" value="10.9889" />
                              <Key frame="1000" value="10.9889" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="70.2231" />
                              <Key frame="19" value="72.5083" />
                              <Key frame="43" value="71.8051" />
                              <Key frame="65" value="74.2" />
                              <Key frame="1000" value="72.5962" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="19" value="0.284" />
                              <Key frame="43" value="0.284" />
                              <Key frame="65" value="1" />
                              <Key frame="1000" value="1" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-35.8622" />
                              <Key frame="19" value="-39.1142" />
                              <Key frame="43" value="-38.7627" />
                              <Key frame="65" value="-38.7627" />
                              <Key frame="1000" value="-38.7627" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.11683" />
                              <Key frame="19" value="-5.09532" />
                              <Key frame="43" value="-9.13833" />
                              <Key frame="65" value="-9.13833" />
                              <Key frame="1000" value="-9.13833" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="19" value="-13.5329" />
                              <Key frame="43" value="-20.3006" />
                              <Key frame="65" value="-20.3006" />
                              <Key frame="1000" value="-20.3006" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="71.7221" />
                              <Key frame="19" value="99.1443" />
                              <Key frame="43" value="94.7497" />
                              <Key frame="65" value="94.7497" />
                              <Key frame="1000" value="94.7497" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="69.349" />
                              <Key frame="19" value="73.9193" />
                              <Key frame="43" value="74.4467" />
                              <Key frame="65" value="71.1068" />
                              <Key frame="1000" value="71.1068" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.70368" />
                              <Key frame="19" value="-19.5144" />
                              <Key frame="43" value="-21.0964" />
                              <Key frame="65" value="-74.0072" />
                              <Key frame="1000" value="-74.0072" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="19" value="16.6091" />
                              <Key frame="43" value="15.4665" />
                              <Key frame="65" value="-5.18802" />
                              <Key frame="1000" value="-5.18802" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Warrior II  Stop" id="5" localization="8" tooltip="Timeline for the Yoga Pose Warrior II." x="698" y="268">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="50">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="84.0896">
                                <Box name="Wait" id="10" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="416" y="70">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-33.4892" />
                              <Key frame="18" value="-33.4892" />
                              <Key frame="32" value="-50.5401" />
                              <Key frame="50" value="5.62267" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-23.1131" />
                              <Key frame="18" value="-23.1131" />
                              <Key frame="32" value="-5.79845" />
                              <Key frame="50" value="-6.67737" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-5.44688" />
                              <Key frame="18" value="-5.44688" />
                              <Key frame="32" value="-5.71056" />
                              <Key frame="50" value="-22.7616" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.7669" />
                              <Key frame="18" value="-67.7669" />
                              <Key frame="32" value="-67.7669" />
                              <Key frame="50" value="-67.7669" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="1" />
                              <Key frame="18" value="0.2892" />
                              <Key frame="32" value="0.2892" />
                              <Key frame="50" value="0.2892" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-37.7032" />
                              <Key frame="18" value="-37.7032" />
                              <Key frame="32" value="-37.6153" />
                              <Key frame="50" value="7.73688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="24.9637" />
                              <Key frame="18" value="24.9637" />
                              <Key frame="32" value="5.10013" />
                              <Key frame="50" value="6.59429" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-20.3006" />
                              <Key frame="18" value="-20.3006" />
                              <Key frame="32" value="-13.5329" />
                              <Key frame="50" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="79.0123" />
                              <Key frame="18" value="79.0123" />
                              <Key frame="32" value="97.4695" />
                              <Key frame="50" value="-4.92435" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="68.1137" />
                              <Key frame="18" value="68.1137" />
                              <Key frame="32" value="69.1684" />
                              <Key frame="50" value="82.7037" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="72.4204" />
                              <Key frame="18" value="23.2889" />
                              <Key frame="32" value="21.7068" />
                              <Key frame="50" value="11.9509" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="0.876518" />
                              <Key frame="18" value="-20.7449" />
                              <Key frame="32" value="-22.0632" />
                              <Key frame="50" value="4.74374" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-49.3049" />
                              <Key frame="18" value="-49.3049" />
                              <Key frame="32" value="-53.26" />
                              <Key frame="50" value="5.62747" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="18" value="6.85796" />
                              <Key frame="32" value="3.34228" />
                              <Key frame="50" value="6.24271" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="10.9889" />
                              <Key frame="18" value="10.3736" />
                              <Key frame="32" value="10.7252" />
                              <Key frame="50" value="22.6785" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="72.5962" />
                              <Key frame="18" value="71.8051" />
                              <Key frame="32" value="72.5083" />
                              <Key frame="50" value="69.9594" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="1" />
                              <Key frame="18" value="0.284" />
                              <Key frame="32" value="0.284" />
                              <Key frame="50" value="0.284" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-38.7627" />
                              <Key frame="18" value="-38.7627" />
                              <Key frame="32" value="-39.1142" />
                              <Key frame="50" value="6.76526" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-9.13833" />
                              <Key frame="18" value="-9.13833" />
                              <Key frame="32" value="-5.09532" />
                              <Key frame="50" value="-6.50159" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-20.3006" />
                              <Key frame="18" value="-20.3006" />
                              <Key frame="32" value="-13.5329" />
                              <Key frame="50" value="-9.66569" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="94.7497" />
                              <Key frame="18" value="94.7497" />
                              <Key frame="32" value="99.1443" />
                              <Key frame="50" value="-5.79845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="71.1068" />
                              <Key frame="18" value="74.4467" />
                              <Key frame="32" value="73.9193" />
                              <Key frame="50" value="81.3023" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-74.0072" />
                              <Key frame="18" value="-21.0964" />
                              <Key frame="32" value="-19.5144" />
                              <Key frame="50" value="-4.04543" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-5.18802" />
                              <Key frame="18" value="15.4665" />
                              <Key frame="32" value="16.6091" />
                              <Key frame="50" value="7.3805" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Box name="Turn Right" id="6" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="461" y="268">
                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="-90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                        <Resource name="Legs" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Turn Left" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="802" y="268">
                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        self.motion = self.session().service("ALMotion")

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                        <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                        <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="90" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                        <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                        <Resource name="Legs" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Compass Move To" id="8" localization="8" tooltip="Make the robot move to a configured point relative to its current location using camera to correct deviation.&#x0A;&#x0A;V1.1.0" x="674" y="490">
                        <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Triggered when the move fails (e.g. the robot falls)." id="5" />
                        <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Distance to travel along the robot X axis." id="6" />
                        <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="Distance to travel along the robot Y axis." id="7" />
                        <Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="Angle to travel around the robot Z axis." id="8" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Move To" id="2" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="532" y="110">
                                  <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try :
            self.compass = self.session().service("ALVisualCompass")
        except Exception as e:
            self.compass = None
            self.logger.error(e)

    def onUnload(self):
        if self.compass:
            self.compass.moveTo(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        if self.compass:
            self.compass.moveTo(self.getParameter("Distance X (m)"), self.getParameter("Distance Y (m)"), self.getParameter("Theta (rad)"))
        # The move is finished so output
        self.onStopped() #~ activate output of the box

    def onInput_onStop(self):
        self.onUnload()
        self.failure()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                  <Parameter name="Distance X (m)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                                  <Parameter name="Distance Y (m)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-10" max="10" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                                  <Parameter name="Theta (rad)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                                  <Resource name="Legs" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Fall Detector" id="3" localization="8" tooltip='Detect if the the robot has fallen and has activated the fall manager process. &#x0A;&#x0A;Note : The output &quot;robotHasFallen&quot; is stimulated 0.5s after the fall is detected to give the robot time to fall.' x="200" y="216">
                                  <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="memory_robotHasFallen" type="0" type_size="1" nature="4" stm_value_name="robotHasFallen" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="5" />
                                  <Output name="robotHasFallen" type="1" type_size="1" nature="2" inner="0" tooltip="This output is stimulated when the robot has fallen." id="6" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="206" y="93">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="6" outputowner="6" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="3" outputowner="3" indexofoutput="6" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Legs" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="12" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="3" outputowner="10" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="5" />
                      <Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Warrior I (1)" id="2" localization="8" tooltip="Enter description here" x="766" y="96">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Warrior I Rechts_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Say2_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="warrior" default_value="warrior" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say (2)" id="12" localization="8" tooltip="Say some text. The text can be localized." x="228" y="82">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Virabhadrasana one is a good pose to strengthen the legs, arms and shoulders and improve posture. We move on to Virabhadrasana two, known as warrior two." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Warrior I " id="1" localization="8" tooltip="Timeline for the Yoga Pose Warrior I." x="98" y="93">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="warrior" default_value="warrior" custom_choice="0" tooltip="" id="5" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="476">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram scale="100">
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="505" y="95">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="207" y="74">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Put your left leg forward and bend it. The right leg is stretched out, the foot pointing outwards. Stretch your arms up, with your palms facing inwards. Try to pull your collarbone up.\r\nBreathe normally, let your thoughts flow.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[Put your left leg forward and bend it. The right leg is stretched out, the foot pointing outwards. Stretch your arms up, with your palms facing inwards. Try to pull your collarbone up.
Breathe normally, let your thoughts flow.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="670" y="93">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="24" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.44688" />
                              <Key frame="25" value="-26.5457" />
                              <Key frame="45" value="-52.9132" />
                              <Key frame="76" value="-52.9132" />
                              <Key frame="88" value="-52.298" />
                              <Key frame="98" value="-52.7388" />
                              <Key frame="275" value="-52.7388" />
                              <Key frame="446" value="-52.7388" />
                              <Key frame="461" value="-52.298" />
                              <Key frame="476" value="-60.8235" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.67737" />
                              <Key frame="25" value="-5.88634" />
                              <Key frame="45" value="-6.2379" />
                              <Key frame="76" value="-6.2379" />
                              <Key frame="88" value="-6.2379" />
                              <Key frame="98" value="-5.87498" />
                              <Key frame="275" value="-5.87498" />
                              <Key frame="446" value="-5.87498" />
                              <Key frame="461" value="-6.2379" />
                              <Key frame="476" value="-5.88634" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-23.2889" />
                              <Key frame="25" value="-20.9158" />
                              <Key frame="45" value="-20.9158" />
                              <Key frame="76" value="-20.9158" />
                              <Key frame="88" value="-46.3165" />
                              <Key frame="98" value="-18.5778" />
                              <Key frame="275" value="-18.5778" />
                              <Key frame="446" value="-18.5778" />
                              <Key frame="461" value="-10.9841" />
                              <Key frame="476" value="-6.67737" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.1517" />
                              <Key frame="25" value="-68.5579" />
                              <Key frame="45" value="-68.5579" />
                              <Key frame="76" value="-68.5579" />
                              <Key frame="88" value="-68.5579" />
                              <Key frame="98" value="-67.4555" />
                              <Key frame="275" value="-67.4555" />
                              <Key frame="446" value="-67.4555" />
                              <Key frame="461" value="-67.7669" />
                              <Key frame="476" value="-67.7669" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2892" />
                              <Key frame="25" value="0.2892" />
                              <Key frame="45" value="0.2892" />
                              <Key frame="76" value="0.2892" />
                              <Key frame="88" value="0.2892" />
                              <Key frame="98" value="0.991413" />
                              <Key frame="275" value="0.991413" />
                              <Key frame="446" value="0.991413" />
                              <Key frame="461" value="0.2892" />
                              <Key frame="476" value="0.2892" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="7.29742" />
                              <Key frame="25" value="-37" />
                              <Key frame="45" value="-53.8752" />
                              <Key frame="76" value="-53.8752" />
                              <Key frame="88" value="-53.26" />
                              <Key frame="98" value="-53.7008" />
                              <Key frame="275" value="-53.7008" />
                              <Key frame="446" value="-53.7008" />
                              <Key frame="461" value="-53.26" />
                              <Key frame="476" value="-34.4511" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="6.41851" />
                              <Key frame="25" value="4.48488" />
                              <Key frame="45" value="9.40682" />
                              <Key frame="76" value="9.40682" />
                              <Key frame="88" value="9.40682" />
                              <Key frame="98" value="9.01781" />
                              <Key frame="275" value="9.01781" />
                              <Key frame="446" value="9.01781" />
                              <Key frame="461" value="9.40682" />
                              <Key frame="476" value="6.06693" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="25" value="-10.8962" />
                              <Key frame="45" value="5.71537" />
                              <Key frame="76" value="5.71537" />
                              <Key frame="88" value="5.71537" />
                              <Key frame="98" value="5.71522" />
                              <Key frame="275" value="5.71522" />
                              <Key frame="446" value="5.71522" />
                              <Key frame="461" value="5.71537" />
                              <Key frame="476" value="-2.45857" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.45169" />
                              <Key frame="25" value="68.1137" />
                              <Key frame="45" value="110.038" />
                              <Key frame="76" value="110.038" />
                              <Key frame="88" value="109.423" />
                              <Key frame="98" value="109.864" />
                              <Key frame="275" value="109.864" />
                              <Key frame="446" value="109.864" />
                              <Key frame="461" value="109.423" />
                              <Key frame="476" value="101.161" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.5611" />
                              <Key frame="25" value="68.2895" />
                              <Key frame="45" value="68.2016" />
                              <Key frame="76" value="68.2016" />
                              <Key frame="88" value="21.4432" />
                              <Key frame="98" value="-77.7298" />
                              <Key frame="275" value="-77.7298" />
                              <Key frame="446" value="-77.7298" />
                              <Key frame="461" value="6.67737" />
                              <Key frame="476" value="61.8734" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="11.4235" />
                              <Key frame="25" value="9.75358" />
                              <Key frame="45" value="9.75358" />
                              <Key frame="76" value="9.75358" />
                              <Key frame="88" value="13.7966" />
                              <Key frame="98" value="12.3966" />
                              <Key frame="275" value="12.3966" />
                              <Key frame="446" value="12.3966" />
                              <Key frame="461" value="13.3571" />
                              <Key frame="476" value="8.17153" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="6.94104" />
                              <Key frame="25" value="-6.94585" />
                              <Key frame="45" value="-6.94585" />
                              <Key frame="76" value="-6.94585" />
                              <Key frame="88" value="-14.7682" />
                              <Key frame="98" value="-23.5574" />
                              <Key frame="275" value="-23.5574" />
                              <Key frame="446" value="-23.5574" />
                              <Key frame="461" value="-20.2175" />
                              <Key frame="476" value="-19.6902" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="5.45169" />
                              <Key frame="25" value="-31.9902" />
                              <Key frame="45" value="-68.5531" />
                              <Key frame="76" value="-68.5531" />
                              <Key frame="88" value="-68.5531" />
                              <Key frame="98" value="-67.7955" />
                              <Key frame="275" value="-67.7955" />
                              <Key frame="446" value="-67.7955" />
                              <Key frame="461" value="-68.5531" />
                              <Key frame="476" value="-60.2913" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.85796" />
                              <Key frame="25" value="6.77007" />
                              <Key frame="45" value="3.07861" />
                              <Key frame="76" value="3.07861" />
                              <Key frame="88" value="3.07861" />
                              <Key frame="98" value="2.93303" />
                              <Key frame="275" value="2.93303" />
                              <Key frame="446" value="2.93303" />
                              <Key frame="461" value="3.07861" />
                              <Key frame="476" value="-3.42537" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="24.6121" />
                              <Key frame="25" value="22.5906" />
                              <Key frame="45" value="22.5906" />
                              <Key frame="76" value="22.5906" />
                              <Key frame="88" value="38.1474" />
                              <Key frame="98" value="31.3869" />
                              <Key frame="275" value="31.3869" />
                              <Key frame="446" value="31.3869" />
                              <Key frame="461" value="23.2058" />
                              <Key frame="476" value="21.8875" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="68.0258" />
                              <Key frame="25" value="68.8168" />
                              <Key frame="45" value="68.8168" />
                              <Key frame="76" value="68.8168" />
                              <Key frame="88" value="72.8598" />
                              <Key frame="98" value="81.8882" />
                              <Key frame="275" value="81.8882" />
                              <Key frame="446" value="81.8882" />
                              <Key frame="461" value="82.0006" />
                              <Key frame="476" value="82.9674" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.284" />
                              <Key frame="25" value="0.284" />
                              <Key frame="45" value="0.284" />
                              <Key frame="76" value="0.284" />
                              <Key frame="88" value="0.284" />
                              <Key frame="98" value="0.991413" />
                              <Key frame="275" value="0.991413" />
                              <Key frame="446" value="0.991413" />
                              <Key frame="461" value="0.284" />
                              <Key frame="476" value="0.284" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="6.85315" />
                              <Key frame="25" value="-35.8622" />
                              <Key frame="45" value="27.7714" />
                              <Key frame="76" value="27.7714" />
                              <Key frame="88" value="27.7714" />
                              <Key frame="98" value="27.5569" />
                              <Key frame="275" value="27.5569" />
                              <Key frame="446" value="27.5569" />
                              <Key frame="461" value="27.7714" />
                              <Key frame="476" value="-36.9169" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-6.32579" />
                              <Key frame="25" value="-6.94104" />
                              <Key frame="45" value="0.0902951" />
                              <Key frame="76" value="0.0902951" />
                              <Key frame="88" value="0.0902951" />
                              <Key frame="98" value="-0.322417" />
                              <Key frame="275" value="-0.322417" />
                              <Key frame="446" value="-0.322417" />
                              <Key frame="461" value="0.0902951" />
                              <Key frame="476" value="3.43018" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-9.66569" />
                              <Key frame="25" value="-10.8962" />
                              <Key frame="45" value="5.71537" />
                              <Key frame="76" value="5.71537" />
                              <Key frame="88" value="5.71537" />
                              <Key frame="98" value="5.71522" />
                              <Key frame="275" value="5.71522" />
                              <Key frame="446" value="5.71522" />
                              <Key frame="461" value="5.71537" />
                              <Key frame="476" value="-2.45857" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="-5.53478" />
                              <Key frame="25" value="71.1068" />
                              <Key frame="45" value="41.8389" />
                              <Key frame="76" value="41.8389" />
                              <Key frame="88" value="41.8389" />
                              <Key frame="98" value="41.6644" />
                              <Key frame="275" value="41.6644" />
                              <Key frame="446" value="41.6644" />
                              <Key frame="461" value="41.8389" />
                              <Key frame="476" value="102.045" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="81.478" />
                              <Key frame="25" value="70.6674" />
                              <Key frame="45" value="71.3705" />
                              <Key frame="76" value="71.3705" />
                              <Key frame="88" value="17.5807" />
                              <Key frame="98" value="-61.0308" />
                              <Key frame="275" value="-61.0308" />
                              <Key frame="446" value="-61.0308" />
                              <Key frame="461" value="26.6336" />
                              <Key frame="476" value="59.4172" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-11.2525" />
                              <Key frame="25" value="-8.08845" />
                              <Key frame="45" value="-8.08845" />
                              <Key frame="76" value="-8.08845" />
                              <Key frame="88" value="-17.8444" />
                              <Key frame="98" value="-15.2006" />
                              <Key frame="275" value="-15.2006" />
                              <Key frame="446" value="-15.2006" />
                              <Key frame="461" value="-11.8678" />
                              <Key frame="476" value="-4.04543" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="4.56796" />
                              <Key frame="25" value="4.56796" />
                              <Key frame="45" value="4.56796" />
                              <Key frame="76" value="4.56796" />
                              <Key frame="88" value="0.173378" />
                              <Key frame="98" value="26.2736" />
                              <Key frame="275" value="26.2736" />
                              <Key frame="446" value="26.2736" />
                              <Key frame="461" value="26.0135" />
                              <Key frame="476" value="12.2146" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="0" indexofinput="3" outputowner="12" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Warrior II (1)" id="1" localization="8" tooltip="Enter description here" x="888" y="96">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="Warrior I Rechts_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
              <Output name="Say2_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
              <Parameter name="File Name" inherits_from_parent="0" content_type="3" value="warrior_2" default_value="warrior" custom_choice="0" tooltip="" id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say (2)" id="12" localization="8" tooltip="Say some text. The text can be localized." x="228" y="82">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="90" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Well done! Virabhadrasana one is a good pose to strengthen the legs, arms and shoulders and improve posture. We move on to Virabhadrasana two, known as warrior two." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Warrior II  (1)" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="112" y="87">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="1" fps="10" start_frame="1" end_frame="-1" size="388">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="450" y="138">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="85" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Text Edit" id="2" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="148" y="80">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("You stay in the position and turn your body towards the middle. The left foot points forward, the right foot towards the middle, like the upper body. Stretch your arms out to the sides.")]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <text>
                                      <![CDATA[You stay in the position and turn your body towards the middle. The left foot points forward, the right foot towards the middle, like the upper body. Stretch your arms out to the sides.]]>
                                    </text>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                </Box>
                                <Box name="Feedback Loop" id="24" localization="8" tooltip="" x="653" y="148">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Say Text" id="3" localization="8" tooltip="Say the text received on its input." x="376" y="26">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1" id="7" localization="8" tooltip="" x="511" y="27">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit" id="9" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="130" y="30">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("one \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[one \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait" id="4" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="641" y="24">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (1)" id="11" localization="8" tooltip="Say the text received on its input." x="377" y="128">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (1)" id="12" localization="8" tooltip="" x="512" y="129">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (1)" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="131" y="132">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("two \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[two \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (1)" id="14" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="642" y="126">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (2)" id="5" localization="8" tooltip="Say the text received on its input." x="380" y="233">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (2)" id="6" localization="8" tooltip="" x="515" y="234">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (2)" id="8" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="134" y="237">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("three \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[three \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (2)" id="15" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="645" y="231">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.5" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (3)" id="16" localization="8" tooltip="Say the text received on its input." x="385" y="338">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Feedback1 (3)" id="17" localization="8" tooltip="" x="520" y="339">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Box name="Text Edit (3)" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="139" y="342">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("four \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[four \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (3)" id="19" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="650" y="336">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Say Text (4)" id="20" localization="8" tooltip="Say the text received on its input." x="382" y="433">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="76" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Text Edit (4)" id="22" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="136" y="437">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("five \\pau=1000\\ ")]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <text>
                                                <![CDATA[five \pau=1000\ ]]>
                                              </text>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
                                          </Box>
                                          <Box name="Wait (4)" id="21" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="649" y="431">
                                            <bitmap>media/images/box/wait.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                            <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                            <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                            <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                          </Box>
                                          <Box name="Feedback1 (4)" id="23" localization="8" tooltip="" x="524" y="432">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Say feedback" id="10" localization="8" tooltip="Say the text received on its input and move during its speech.&#x0A;" x="580" y="36">
                                                      <bitmap>media/images/box/interaction/say.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                      <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="89" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                      <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="7">
                                                        <Choice value="disabled" />
                                                        <Choice value="random" />
                                                        <Choice value="contextual" />
                                                      </Parameter>
                                                      <Resource name="Speech" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Select Camera" id="1" localization="8" tooltip="Change the currently used camera." x="109" y="37">
                                                      <bitmap>media/images/box/interaction/look.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.cameraModule = self.session().service( "ALVideoDevice" )

    def onUnload(self):
        pass

    def onInput_onUseTopCamera(self):
        self.cameraModule.setActiveCamera( 0 )
        self.onReady()

    def onInput_onUseBottomCamera(self):
        self.cameraModule.setActiveCamera( 1 )
        self.onReady()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onUseTopCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the top of the head (forehead)." id="2" />
                                                      <Input name="onUseBottomCamera" type="1" type_size="1" nature="1" inner="0" tooltip="Use the camera at the bottom of the head (mouth)." id="3" />
                                                      <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="The camera change is done." id="4" />
                                                      <Resource name="Camera setting" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Box name="Send Request" id="4" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="417" y="36">
                                                      <bitmap>media/images/box/box-python-script.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import os
import httplib
import json
import base64

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("#####################")
        poseName = self.getParameter('File Name')
        try:
            self.logger.info("Reading the server_config.txt")
            config_file_path = os.path.join(self.behaviorAbsolutePath(), 'server_config.txt')

            with open(config_file_path, "r") as config_file:
                server_config = config_file.read().strip()

            server_ip, server_port = server_config.split(":")
            server_port = int(server_port)

            image_path = os.path.join("/home/nao/recordings/cameras/", poseName+'.jpg')
            with open(image_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
            self.logger.info("Reading the "+ image_path)

            connection = httplib.HTTPConnection(server_ip, server_port)

            headers = {'Content-type': 'application/json'}

            payload = json.dumps({'image_data': encoded_image, 'pose_name': poseName})

            connection.request('POST', '/get_yoga_feedback', payload, headers)
            self.logger.info("Sending the POST request")
            response = connection.getresponse()

            if response.status == 200:
                response_data = json.loads(response.read())
                message = response_data.get('message')
            else:
                message = "Failed to send the image. Status: {}".format(response.status)

            connection.close()

        except Exception as e:
            message = "Connection error: {}".format(str(e))
            self.logger.error(str(e))
        self.logger.info(str(message))
        self.onStopped(str(message))

        return message

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                                                    </Box>
                                                    <Box name="Take Picture" id="2" localization="8" tooltip="Take a picture with one of the cameras camera and store it in his memory in ~/recordings/cameras. The image format is JPG.&#x0A;&#x0A;V1.1.0&#x0A;" x="260" y="38">
                                                      <bitmap>media/images/box/interaction/picture.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.resolutionMap = {
            '160 x 120': 0,
            '320 x 240': 1,
            '640 x 480': 2,
            '1280 x 960': 3
        }
        self.cameraMap = {
            'Top': 0,
            'Bottom': 1
        }

        self.recordFolder = "/home/nao/recordings/cameras/"

    def onLoad(self):
        self.bIsRunning = False
        try:
            self.photoCapture = self.session().service( "ALPhotoCapture" )
        except Exception as e:
            self.photoCapture = None
            self.logger.error(e)

    def onUnload(self):
        pass

    def onInput_onStart(self):
        if( self.bIsRunning ):
            return
        self.bIsRunning = True
        resolution = self.resolutionMap[self.getParameter("Resolution")]
        cameraID = self.cameraMap[self.getParameter("Camera")]
        fileName = self.getParameter("File Name")
        if self.photoCapture:
            self.photoCapture.setResolution(resolution)
            self.photoCapture.setCameraID(cameraID)
            self.photoCapture.setPictureFormat("jpg")
            self.photoCapture.takePicture( self.recordFolder, fileName )
        self.bIsRunning = False
        self.onStopped()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                                      <Parameter name="Resolution" inherits_from_parent="0" content_type="3" value="1280 x 960" default_value="640 x 480" custom_choice="0" tooltip="Image resolution." id="4">
                                                        <Choice value="160 x 120" />
                                                        <Choice value="320 x 240" />
                                                        <Choice value="640 x 480" />
                                                        <Choice value="1280 x 960" />
                                                      </Parameter>
                                                      <Parameter name="File Name" inherits_from_parent="1" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the file without its extension." id="5" />
                                                      <Parameter name="Camera" inherits_from_parent="0" content_type="3" value="Top" default_value="Top" custom_choice="0" tooltip="Enables to select the camera (Top or Bottom) that will take the picture." id="6">
                                                        <Choice value="Top" />
                                                        <Choice value="Bottom" />
                                                      </Parameter>
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="3" />
                                                    <Link inputowner="10" indexofinput="2" outputowner="4" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="3" indexofinput="2" outputowner="9" indexofoutput="3" />
                                          <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="4" />
                                          <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="13" indexofoutput="3" />
                                          <Link inputowner="12" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="13" indexofinput="2" outputowner="4" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="8" indexofoutput="3" />
                                          <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
                                          <Link inputowner="15" indexofinput="2" outputowner="6" indexofoutput="4" />
                                          <Link inputowner="16" indexofinput="2" outputowner="18" indexofoutput="3" />
                                          <Link inputowner="17" indexofinput="2" outputowner="16" indexofoutput="4" />
                                          <Link inputowner="19" indexofinput="2" outputowner="17" indexofoutput="4" />
                                          <Link inputowner="20" indexofinput="2" outputowner="22" indexofoutput="3" />
                                          <Link inputowner="8" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="18" indexofinput="2" outputowner="15" indexofoutput="4" />
                                          <Link inputowner="22" indexofinput="2" outputowner="19" indexofoutput="4" />
                                          <Link inputowner="23" indexofinput="2" outputowner="20" indexofoutput="4" />
                                          <Link inputowner="21" indexofinput="2" outputowner="23" indexofoutput="4" />
                                          <Link inputowner="9" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="21" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                <Link inputowner="24" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="24" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                          <ActuatorList model="">
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="1" unit="0" />
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-25.8426" />
                              <Key frame="60" value="-40.6915" />
                              <Key frame="365" value="-40.6915" />
                              <Key frame="377" value="-29.2704" />
                              <Key frame="388" value="5.44688" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="-5.71056" />
                              <Key frame="60" value="-6.59429" />
                              <Key frame="365" value="-6.59429" />
                              <Key frame="377" value="-13.3571" />
                              <Key frame="388" value="-6.32579" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="-20.0369" />
                              <Key frame="60" value="-14.4166" />
                              <Key frame="365" value="-14.4166" />
                              <Key frame="377" value="-13.7966" />
                              <Key frame="388" value="-23.0252" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="-67.4154" />
                              <Key frame="60" value="-78.0454" />
                              <Key frame="365" value="-78.0454" />
                              <Key frame="377" value="-68.4701" />
                              <Key frame="388" value="-68.4701" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                              <Key frame="1" value="0.2996" />
                              <Key frame="60" value="0.8344" />
                              <Key frame="365" value="0.8344" />
                              <Key frame="377" value="0.8532" />
                              <Key frame="388" value="0.3116" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-37.3516" />
                              <Key frame="60" value="-39.9931" />
                              <Key frame="365" value="-39.9931" />
                              <Key frame="377" value="-42.2735" />
                              <Key frame="388" value="7.64898" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                              <Key frame="1" value="4.74855" />
                              <Key frame="60" value="8.08364" />
                              <Key frame="365" value="8.08364" />
                              <Key frame="377" value="10.9889" />
                              <Key frame="388" value="6.85796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="60" value="-18.0154" />
                              <Key frame="365" value="-18.0154" />
                              <Key frame="377" value="-14.4118" />
                              <Key frame="388" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                              <Key frame="1" value="68.5531" />
                              <Key frame="60" value="85.1695" />
                              <Key frame="365" value="85.1695" />
                              <Key frame="377" value="78.1333" />
                              <Key frame="388" value="-5.27591" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="67.4984" />
                              <Key frame="60" value="60.384" />
                              <Key frame="365" value="60.384" />
                              <Key frame="377" value="63.3675" />
                              <Key frame="388" value="81.7369" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="9.5778" />
                              <Key frame="60" value="74.0072" />
                              <Key frame="365" value="74.0072" />
                              <Key frame="377" value="21.5311" />
                              <Key frame="388" value="12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                              <Key frame="1" value="-7.91266" />
                              <Key frame="60" value="9.93417" />
                              <Key frame="365" value="9.93417" />
                              <Key frame="377" value="-2.37549" />
                              <Key frame="388" value="4.56796" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                              <Key frame="1" value="-32.166" />
                              <Key frame="60" value="-17.0534" />
                              <Key frame="365" value="-17.0534" />
                              <Key frame="377" value="-40.6915" />
                              <Key frame="388" value="5.3638" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                              <Key frame="1" value="6.68218" />
                              <Key frame="60" value="22.9373" />
                              <Key frame="365" value="22.9373" />
                              <Key frame="377" value="6.59429" />
                              <Key frame="388" value="6.59429" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                              <Key frame="1" value="21.8875" />
                              <Key frame="60" value="17.0486" />
                              <Key frame="365" value="17.0486" />
                              <Key frame="377" value="14.4166" />
                              <Key frame="388" value="22.8542" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                              <Key frame="1" value="70.2231" />
                              <Key frame="60" value="68.4701" />
                              <Key frame="365" value="68.4701" />
                              <Key frame="377" value="78.0454" />
                              <Key frame="388" value="70.0473" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                              <Key frame="1" value="0.294" />
                              <Key frame="60" value="0.8532" />
                              <Key frame="365" value="0.8532" />
                              <Key frame="377" value="0.8344" />
                              <Key frame="388" value="0.3104" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                              <Key frame="1" value="-35.8622" />
                              <Key frame="60" value="-36.0332" />
                              <Key frame="365" value="-36.0332" />
                              <Key frame="377" value="-39.3779" />
                              <Key frame="388" value="7.29261" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                              <Key frame="1" value="-7.11683" />
                              <Key frame="60" value="-24.0847" />
                              <Key frame="365" value="-24.0847" />
                              <Key frame="377" value="-8.08364" />
                              <Key frame="388" value="-6.76526" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                              <Key frame="1" value="-10.9841" />
                              <Key frame="60" value="-18.0154" />
                              <Key frame="365" value="-18.0154" />
                              <Key frame="377" value="-14.4118" />
                              <Key frame="388" value="-10.1051" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                              <Key frame="1" value="71.7221" />
                              <Key frame="60" value="59.9398" />
                              <Key frame="365" value="59.9398" />
                              <Key frame="377" value="85.1695" />
                              <Key frame="388" value="-5.79845" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                              <Key frame="1" value="69.349" />
                              <Key frame="60" value="58.6214" />
                              <Key frame="365" value="58.6214" />
                              <Key frame="377" value="62.9329" />
                              <Key frame="388" value="82.1812" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                              <Key frame="1" value="-8.70368" />
                              <Key frame="60" value="-71.6294" />
                              <Key frame="365" value="-71.6294" />
                              <Key frame="377" value="-21.5359" />
                              <Key frame="388" value="-12.0436" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                              <Key frame="1" value="5.88634" />
                              <Key frame="60" value="-14.0603" />
                              <Key frame="365" value="-14.0603" />
                              <Key frame="377" value="4.56796" />
                              <Key frame="388" value="4.56796" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                      </Box>
                      <Link inputowner="0" indexofinput="3" outputowner="12" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="12" indexofinput="2" outputowner="7" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Tadasana" id="7" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="59" y="478">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("The first exercise is called Tadasana, or mountain pose.\r\n\r\nTadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.\r\n\r\nStand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.\r\n\r\nHold this position for five breaths. Just breathe normally, the breaths don\'t have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.\r\n\r\nI\'ll count for you.")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[The first exercise is called Tadasana, or mountain pose.

Tadasana is an important basic pose in yoga that can help improve posture and reduce stress. It creates awareness of muscles and balance and is a good starting position.

Stand up straight with your feet hip-width apart. Make sure that your knees are not straight, but slightly bent. Slowly move your focus from your leg muscles; calves, thighs up to your lower back and stomach. Your arms hang relaxed at your sides. You can also keep your hands open in front of you. Roll your shoulders once from front to back so that your back is really straight. Your chin is tilted slightly towards your chest so that your back and neck are in line.

Hold this position for five breaths. Just breathe normally, the breaths don't have to be particularly deep or long. Try to let go of all other thoughts and focus your attention on your breathing and posture.

I'll count for you.]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Warrior I" id="13" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="321" y="468">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.\r\n\r\nIt creates awareness of muscles and balance.\r\n\r\nStand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \\pau=300\\ and extend your left leg, foot should be facing outwards. \\pau=300\\\r\nBend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.\r\n\r\nHold this position for five breaths.\r\n\r\nI\'ll count for you again.")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[Warrior one is a powerful pose that strengthens the legs, arms and shoulders and improves posture.

It creates awareness of muscles and balance.

Stand with your feet together and your hands at your sides. Make sure your feet are flat on the floor and your shoulders are relaxed and facing downward. Now step your right leg forward \pau=300\ and extend your left leg, foot should be facing outwards. \pau=300\
Bend your right knee as far as you can without it being too strenuous. Raise your arms up, palm facing inwards. Pull your chest and collarbone up and imagine your hands reaching to the ceiling. Your gaze is directed upwards.

Hold this position for five breaths.

I'll count for you again.]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Warrior II" id="14" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="568" y="467">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.\r\n\r\nStep your left leg out to the side with a wide step \\pau=300\\ and turn your right foot out ninety degrees. \\pau=300\\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.\r\n\r\nHold this position for five breaths. Focus your attention on your breathing and posture.\r\nI\'m counting for you.")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[Warrior two is a powerful and challenging yoga pose that has many health benefits. This pose helps with focus and stress relief. It can also help release negative emotions and help you find your peace and calm.

Step your left leg out to the side with a wide step \pau=300\ and turn your right foot out ninety degrees. \pau=300\ The left leg should be straight and the right leg bent. Your body should be facing the direction of the left foot. Stretch your arms out to your sides so that they form a line with your shoulders.

Hold this position for five breaths. Focus your attention on your breathing and posture.
I'm counting for you.]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Tadasana" id="15" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="814" y="469">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Stand up straight with your knees slightly bent. Your arms hang relaxed at your sides, your palms open in front of you. Tilt your chin slightly to your chest and breathe along the muscles in your body.\r\n\\pau=1000\\")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[Stand up straight with your knees slightly bent. Your arms hang relaxed at your sides, your palms open in front of you. Tilt your chin slightly to your chest and breathe along the muscles in your body.
\pau=1000\]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Warrior I" id="17" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1066" y="469">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("Put your left leg forward and bend it. The right leg is stretched out, the foot pointing outwards. Stretch your arms up, with your palms facing inwards. Try to pull your collarbone up.\r\nBreathe normally, let your thoughts flow.")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[Put your left leg forward and bend it. The right leg is stretched out, the foot pointing outwards. Stretch your arms up, with your palms facing inwards. Try to pull your collarbone up.
Breathe normally, let your thoughts flow.]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Box name="Warrior II" id="18" localization="8" tooltip="Send the text you entered when the input is stimulated." plugin="textedit_plugin" x="1312" y="475">
              <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("You stay in the position and turn your body towards the middle. The left foot points forward, the right foot towards the middle, like the upper body. Stretch your arms out to the sides.")]]>
                </content>
              </script>
              <pluginContent>
                <text>
                  <![CDATA[You stay in the position and turn your body towards the middle. The left foot points forward, the right foot towards the middle, like the upper body. Stretch your arms out to the sides.]]>
                </text>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the text on the output." id="2" />
              <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The text you entered." id="3" />
            </Box>
            <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="8" indexofinput="2" outputowner="9" indexofoutput="3" />
            <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
            <Link inputowner="12" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="6" indexofinput="2" outputowner="16" indexofoutput="3" />
            <Link inputowner="5" indexofinput="2" outputowner="10" indexofoutput="3" />
            <Link inputowner="10" indexofinput="2" outputowner="16" indexofoutput="3" />
            <Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="3" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="3" />
            <Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="3" />
            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" />
            <Link inputowner="9" indexofinput="2" outputowner="1" indexofoutput="3" />
            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
